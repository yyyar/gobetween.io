!function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,t,n){Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var n=e&&e.__esModule?function(){return e["default"]}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="./",t(t.s=34)}([function(e,t){e.exports='<p><img src="https://github.com/yyyar/gobetween/blob/master/logo.png?raw=true" alt=""></p>\n<p>For a long time all of us have been using &quot;traditional&quot; load balancers / proxies like <a href="https://www.nginx.com/">nginx</a>, <a href="http://www.haproxy.org/">haproxy</a>, and others.</p>\n<p>But in modern world balancing become more and more flexible because of environment changes are made more often. Nodes behind load balancer are spawning and disappearing according to load and/or other requirements. Auto scaling and containerization became almost a &quot;silver bullet&quot; in modern IT infrastructure architectures.</p>\n<p>In the IP-telephony world DNS SRV records are main mechanism to find out nearest and less loaded call router.</p>\n<p>Same situation is in modern microservices world, but unfortunately, there are almost no lb / proxy that has flexible and complete <em>automatic discovery</em> feature. There are lot&#39;s of tricks and workarounds like <a href="https://www.airpair.com/scalable-architecture-with-docker-consul-and-nginx">this</a>.</p>\n<p><strong>gobetween</strong> is aiming to fill this gap and provide fast, flexible and full-featured load balancing solution for modern microservice architectures.  </p>\n'},function(e,t){e.exports='<ul>\n<li><a href="Introduction">Introduction</a></li>\n<li><a href="Installation">Installation</a></li>\n<li><a href="Configuration">Configuration</a><ul>\n<li><a href="Balancing">Balancing</a></li>\n<li><a href="Discovery">Discovery</a></li>\n<li><a href="Healthchecks">Healthchecks</a></li>\n<li><a href="Access-Control">Access Control</a></li>\n<li><a href="TLS-Termination">TLS Termination</a></li>\n<li><a href="Windows-specific-notes">Windows specific notes</a></li>\n</ul>\n</li>\n<li>Use Cases<ul>\n<li><a href="Static-balancing">Simple load balancing</a></li>\n<li><a href="SRV-balancing">SRV balancing</a></li>\n<li><a href="Docker---Swarm-Balancing">Docker / Swarm balancing</a></li>\n<li><a href="ElasticSearch-cluster-with-Exec-discovery">ElasticSearch cluster with Exec discovery</a></li>\n<li><a href="Service-balancing-with-Consul-discovery-and-Docker-Registrator">Service balancing with Consul discovery and Docker Registrator</a></li>\n</ul>\n</li>\n<li><a href="REST-API">REST API</a></li>\n<li><a href="Performance-tests">Performance tests</a></li>\n</ul>\n'},function(e,t){e.exports='<p><em><strong>(since 0.3.0)</strong></em></p>\n<p>Access control support all subnets from IPv6 and IPv4 pool.</p>\n<p>To enable access control need to add  [servers.servername.access] section into config file or add it via <a href="https://github.com/yyyar/gobetween/wiki/REST-API">REST API</a></p>\n<p>###Policy</p>\n<p>Access control section can be defined with or without default policy : </p>\n<pre><code>default = &quot;deny&quot; | &quot;allow&quot;\n</code></pre><p>Allow policy is mean that all traffic pass to selected server .\nDeny policy is opposite and reject all traffic point to selected servers.</p>\n<p>###Rules</p>\n<p>Rules section needs to be defined to list rules applied over default policy.\nRules are checking from top and down the list. First rule match meant check stops and rule apply.</p>\n<pre><code>rules = [\n    &quot;allow 127.0.0.1&quot;,\n    &quot;deny 192.168.1.0/24&quot;,\n    &quot;allow 192.168.0.0/16&quot;,\n    &quot;allow 10.0.0.0/16&quot;,\n   ]\n</code></pre><p>In shown case  packets came from 192.168.1.0/24 will be rejected despite the fact that they are included in the subset of subnets listed in next line 192.168.0.0/16. All other packets from 192.168.0.0/16 subnet will be passed .</p>\n<p>full example:</p>\n<pre><code class="lang-toml">[servers.servername.access]\ndefault = &quot;deny&quot;\nrules = [\n    &quot;allow 127.0.0.1&quot;,\n    &quot;deny 192.168.1.0/24&quot;,\n    &quot;allow 192.168.0.0/16&quot;,\n    &quot;allow 10.0.0.0/16&quot;,\n   ]\n</code></pre>\n'},function(e,t){e.exports='<p>Balancing strategy is a way <em>gobetween</em> select backends (from discovery backends pool)  for new client connection. It&#39;s defined in <code>balance</code> property within <code>[servers.&lt;name&gt;]</code>, and is <code>weight</code> by default.</p>\n<h5 id="-weight-"><code>weight</code></h5>\n<p>Select backend from discovery pool with probability based on backends weights.\nFor example, for backends pool:</p>\n<pre><code class="lang-json">[\n    &quot;host1 weight=1&quot;\n    &quot;host2 weight=2&quot;\n]\n</code></pre>\n<p>host1 will be selected with probability 75%, and host2 will be selected in 25% cases.</p>\n<p>If weight for all backends are the same, backend will be selected randomly.</p>\n<h5 id="-iphash-"><code>iphash</code></h5>\n<p>Target backend will be calculated using hash function of client ip address mod backends count. Note if backends pool changes (for example, due discovery), client may be proxied to a different backend.</p>\n<h5 id="-leastconn-"><code>leastconn</code></h5>\n<p><em>gobetween</em> will select backends with least connections to it.</p>\n<h5 id="-roundrobin-"><code>roundrobin</code></h5>\n<p>It&#39;s most simple balancing strategy, and each new connection will be proxies to next backend in the backends pool successively.</p>\n<h5 id="-leastbandwidth-"><code>leastbandwidth</code></h5>\n<p><em>(since 0.3.0)</em>\nBackends with least sum of rx/tx per second traffic will be selected for next request. Note that rx/tx per second values are calculated with 2 seconds interval so changes in bandwidth won&#39;t be instantly applied.</p>\n'},function(e,t){e.exports='<h2 id="configuration-location">Configuration location</h2>\n<p><em>(since v0.3.0)</em></p>\n<p>There are several options where gobetween could pull it&#39;s configuration on startup.</p>\n<h3 id="file">file</h3>\n<p><code>$ gobetween from-file /path/to/gobetween.toml</code></p>\n<h3 id="http">http</h3>\n<p><code>$ gobetween from-url http://some.url/gobetween.toml</code></p>\n<h3 id="consul-kv">consul kv</h3>\n<p><code>$ gobetween from-consul localhost:8500 --key=gobetween --scheme=http -f json</code></p>\n<h2 id="configuration-format">Configuration format</h2>\n<p>gobetween could be configured with TOML or JSON (these formats map 1-to-1 to each other).\nYou can specify format with --format (-f) option, for exaple:</p>\n<p><code>$ gobetween from-url http://some.url/gobetween.toml -f toml</code></p>\n<p><code>$ gobetween from-url http://some.url/gobetween.json -f json</code></p>\n<h2 id="passing-arguments-in-env-variable">Passing arguments in ENV variable</h2>\n<p>It&#39;s possible to pass command-line args via GOBETWEEN environment variable (containing json array of arguments) instead as typical args. It may be useful for containerization when you store application parameters in env and don&#39;t want to change command line.</p>\n<p>So instead</p>\n<p><code>$ gobetween from-url http://some.url/gobetween.toml -f toml</code></p>\n<p>You can use the following syntax:</p>\n<pre><code>$ GOBETWEEN=&#39;[&quot;from-url&quot;, &quot;http://some.url/gobetween.toml&quot;, &quot;-f&quot;, &quot;toml&quot;]&#39;\n$ gobetween\n</code></pre>'},function(e,t){e.exports='<p>Service discovery solves the problem of automatic determining locations of service instances. There are two major types of service discovery: client-side discovery and server-side discovery. <em>gobetween</em> has build-in <a href="http://microservices.io/patterns/server-side-discovery.html">server-side discovery</a> and acts as a router that can have static configuration, or query different kinds of &quot;service registries&quot;, depending on how it&#39;s configured.</p>\n<p>Currently <em>gobetween</em> supports the following discovery types used for building backends pool for the server:</p>\n<ul>\n<li><a href="#static">static</a></li>\n<li><a href="#src">srv</a></li>\n<li><a href="#docker">docker</a></li>\n<li><a href="#json">json</a></li>\n<li><a href="#plaintext">plaintext</a></li>\n<li><a href="#exec">exec</a></li>\n<li><a href="#consul">consul</a></li>\n</ul>\n<p>Discovery is defined in <code>[servers.&lt;name&gt;.discovery]</code> section in <code>kind</code> property.</p>\n<p>There are some common properties for each discovery type (expect static):</p>\n<pre><code class="lang-toml">kind = &quot;&lt;kind&gt;&quot;         # (required)\nfailpolicy = &quot;keeplast&quot; # (optional) &quot;keeplast&quot; | &quot;setempty&quot; - what to do with backends if discovery fails\ninterval = &quot;0s&quot;         # (required) backends cache invalidation interval; 0 means never.\ntimeout = &quot;5s&quot;          # (optional) max time to wait for discover until falling to failpolicy\n</code></pre>\n<h3 id="static">static</h3>\n<p>It&#39;s a simplest way to build load balancer backends. In this case actually no discovery is happened and backends list are static and managed only by health checks. <code>static_list</code> can contain as many backends as needed.</p>\n<p><img src="http://i.piccy.info/i9/4f0b4f9b1a5ba56b6a0559a17d611c5b/1465913152/19993/1043487/simple.png" alt=""></p>\n<pre><code class="lang-toml">[servers.example]\n\n# ...\n\n  [servers.example.discovery]\n  kind = &quot;static&quot;\n  static_list = [\n    &quot;localhost:8000 weight=5&quot;,  # &quot;host:port weight=N priority=M&quot;, weight and priority are optional\n    &quot;localhost:8001&quot;            # and = 1 by default\n  ]\n</code></pre>\n<h3 id="srv">srv</h3>\n<p>This discovery method uses DNS lookup to build backends list. gobetween will query DNS server defined in <code>srv_lookup_server</code> property and filter services using pattern defined in <code>srv_lookup_server</code>. You can use any custom DNS server or <a href="https://www.consul.io/docs/agent/dns.html">Consul DNS</a>.</p>\n<p><img src="http://i.piccy.info/i9/c1ab436d6c65f957c29ff26d3ca7cc17/1465913811/28400/1043487/srv.png" alt=""></p>\n<pre><code class="lang-toml">[servers.example]\n\n# ...\n\n  [servers.example.discovery]\n  kind = &quot;srv&quot;\n  srv_lookup_server = &quot;some.server:53&quot;\n  srv_lookup_pattern = &quot;some.service.&quot;\n  srv_dns_protocol = &quot;udp&quot;  # (since v0.2.0) - protocol to use for dns lookup: udp | tcp\n</code></pre>\n<h3 id="docker">docker</h3>\n<p>Docker discovery can work both with stand-alone <a href="http://docker.com">Docker</a> server or with <a href="https://docs.docker.com/swarm/">Docker Swarm</a>. <em>gobetween</em> will call Docker / Swarm API endpoint defined in <code>docker_endpoint</code> to build backends list. It may be HTTP endpoint (like <code>http://0.0.0.0:2375</code>) or Unix socket (<code>unix:///var/run/docker.sock</code>). To select only needed containers you can set <code>docker_container_label</code> property and containers will be filtered based on provided <a href="https://docs.docker.com/engine/userguide/labels-custom-metadata/#container-labels">container label</a> and label value. You should also set <code>docker_container_private_port</code> so gobetween will use corresponding container public port while adding it to backends list.</p>\n<p><img src="http://i.piccy.info/i9/7de5f9db763a40849bb885d34a4fdeaa/1465914526/71950/1043487/docker.png" alt=""></p>\n<pre><code class="lang-toml">[servers.example]\n\n# ...\n\n  [servers.example.discovery]\n  kind = &quot;docker&quot;\n  docker_endpoint = &quot;http://localhost:2375&quot; # (required) Endpoint to docker API\n  docker_container_label = &quot;proxied=true&quot;   # (optional) Label to filter containers\n  docker_container_private_port = 80        # (required) Private port of container to use\n  docker_container_host_env_var = &quot;&quot;        # (optional) (since v0.2.0) Take container host from container env variable\n</code></pre>\n<h3 id="json">json</h3>\n<p>JSON discovery is useful for custom setups when you have your own service registry implementation that can provide backends list in JSON format. <em>gobetween</em> will make HTTP query to <code>json_endpoint</code>, expecting valid JSON in response, parse it and build backends list. By defaults JSON should have the following format:</p>\n<pre><code class="lang-js">[ \n  {&quot;host&quot;: &quot;0.0.0.0&quot;, &quot;port&quot;: &quot;1231&quot;, &quot;weight&quot;: 1, &quot;priority&quot;: 1},\n  {&quot;host&quot;: &quot;1.1.1.1&quot;, &quot;port&quot;: &quot;1232&quot;, &quot;weight&quot;: 2, &quot;priority&quot;: 1},\n  ...\n]\n</code></pre>\n<p>But it may be overridden to fit your custom JSON structure.</p>\n<pre><code class="lang-toml">[servers.example]\n\n# ...\n\n  [servers.example.discovery]\n  kind = &quot;json&quot;\n  json_endpoint = &quot;http://localhost:8080&quot;  # (required) JSON discovery Url\n  json_host_pattern = &quot;some.level.host&quot;    # (optional) path to host value in JSON object, by default &quot;host&quot;\n  json_port_pattern = &quot;some.level.port&quot;    # (optional) path to port value in JSON object, by default &quot;port&quot;\n  json_weight_pattern = &quot;some.level.weight&quot; # (optional) path to weight in JSON object, by default &quot;weight&quot;\n  json_priority_pattern = &quot;some.level.priority&quot; # (optional) path to priority in JSON object, by default &quot;priority&quot;\n</code></pre>\n<h3 id="plaintext">plaintext</h3>\n<p>This is even simpler way to integrate custom discovery registries. Line in json discovery, <em>gobetween</em> will query <code>plaintext_endpoint</code> to get newline separated list of nodes in plain text format. Then it will be parsed using regexps line-by-line (one backend in line).A ll necessary values like host, port, etc will captured from named regexp groups. By default regexp plain discovery use </p>\n<pre><code class="lang-regex">(?P&lt;host&gt;\\S+):(?P&lt;port&gt;\\d+)(\\sweight=(?P&lt;weight&gt;\\d+))?(\\spriority=(?P&lt;priority&gt;\\d+))\n</code></pre>\n<p>So you can use parse the following responses by default: </p>\n<pre><code>0.0.0.0:1234 weight=0, priority=1\n0.0.0.0:4321 weight=1 priority=0\n</code></pre><p>You can override regexp used to capture values using <code>plaintext_regex_pattern</code> property, keeping in mind groups names:</p>\n<ul>\n<li><code>(?P&lt;host&gt;...)</code></li>\n<li><code>(?P&lt;port&gt;...)</code></li>\n<li><code>(?P&lt;weight&gt;...)</code></li>\n<li><code>(?P&lt;priority&gt;...)</code></li>\n</ul>\n<p>All another captured groups will be ignored. </p>\n<pre><code class="lang-toml">[servers.example]\n\n# ...\n\n  [servers.example.discovery]\n  kind = &quot;plaintext&quot;\n  plaintext_endpoint = &quot;http://some.url.com&quot;   # (required) Url to plain text discovery\n  plaintext_regex_pattern = &quot;&quot;                 # (optional) Regex with named capturing groups\n</code></pre>\n<h3 id="exec">exec</h3>\n<p>This is most powerful discovery method. In this case backends list will be parser from the stdout of arbitrary script / program. <em>gobetween</em> will execute <code>exec_command</code> (first element is full path to the program, all others are optional arguments. Expected output of the script should be in the following format:</p>\n<pre><code>host1:port1 weight=N\nhost2:port2 weight=M\n</code></pre><p>Weight is optional. Lines should be separated by newline (\\n). </p>\n<p>Here is an example of script <code>/path/to/script.sh</code>:</p>\n<pre><code class="lang-bash">#!/usr/bin/env bash\n\necho localhost:8000 weight=1\necho localhost:8001 weight=2\n</code></pre>\n<p><em>gobetween</em> process should have execute permission to the script.</p>\n<pre><code class="lang-toml">[servers.example]\n\n# ...\n\n  [servers.example.discovery]\n  kind = &quot;exec&quot;\n  exec_command = [&quot;/path/to/script.sh&quot;, &quot;arg1&quot;, &quot;arg2&quot;] # (required) command to exec and variable-length arguments\n</code></pre>\n<h3 id="consul">consul</h3>\n<p><em>(since v0.3.0)</em>\nConsul discovery uses Consul API to retrieve list of backends. If you&#39;re relying on Consul healthchecks and using <code>consul_service_passing_only = true</code> if makes sense to turn off gobetween healthchecks.</p>\n<pre><code class="lang-toml">[servers.example]\n\n# ...\n\n  [servers.example.discovery]\n  consul_host = &quot;localhost:8500&quot;       # (required) Consul host:port\n  consul_service_name = &quot;myservice&quot;    # (required) Service name\n  consul_service_tag = &quot;&quot;              # (optional) Service tag\n  consul_service_passing_only = true   # (optional) Get only services with passing healthchecks\n\n  consul_tls_enabled = false                    # (optional) enable client tls auth\n  consul_tls_cert_path = &quot;/path/to/cert.pem&quot;\n  consul_tls_key_path = &quot;/path/to/key.pem&quot;\n  consul_tls_cacert_path = &quot;/path/to/cacert.pem&quot;\n</code></pre>\n'},function(e,t){e.exports='<p>Docker containers direct discovery is simple with gobetween . Simply run containers with selected label (you may separate containers with same internal port , but with different service type by different labels)</p>\n<p><img src="http://i.piccy.info/i9/7de5f9db763a40849bb885d34a4fdeaa/1465914526/71950/1043487/docker.png" alt=""></p>\n<p>In this article we will discover services and  balance docker containers directly with docker(or swarm) API.\nFor this we need to define discovery  type as  “Docker”.  Also need to define docker host(ip) and port or swarm manage host(ip) and port . Service discovery in this cases works via containers labels. In this cases label will be &quot;api=true&quot; . All containers  from swarm cluster( or from docker host) marked with this label  will be balanced by gobetween. In balancing pool will be added all containers that are in “active” state and marked with defined label. Also it takes only containers with selected in “docker_container_private_port”  internal port enabled.</p>\n<p>Also in this example  we will use more complicated healthcheck. It named exec . Main idea - you know what you need to check , you may write your own script , gobetween send IP(arg1) and port(arg2) of node that need to be checked in this way : script.sh arg1 arg2  and it should return 1 if success and 0 if fail in stdout. In exec_timeout_duration variable you need to specify script max execution time. If during this time script does not return expected output check marked as failed. </p>\n<p><strong>IMPORTANT</strong> “timeout”  value should be less then check “interval” value.</p>\n<pre><code class="lang-toml">[servers.sample3]\nbind = &quot;localhost:3002&quot;\nprotocol = &quot;tcp&quot;\nbalance = &quot;weight&quot;\n\n  [servers.sample3.discovery]\n    interval = &quot;10s&quot;\n    timeout = &quot;2s&quot;\n    kind = &quot;docker&quot;\n    docker_endpoint = &quot;http://localhost:2375&quot;  # Docker / Swarm API    \n    docker_container_label = &quot;api=true&quot;  # label to filter containers\n    docker_container_private_port = 80   # gobetween will take public container port for this private port\n\n  [servers.sample3.healthcheck]\n    fails = 1                      \n    passes = 1\n    interval = &quot;2s&quot;   \n    timeout = &quot;1s&quot;             \n    kind = &quot;ping&quot;\n</code></pre>\n'},function(e,t){e.exports='<p>Everyone who use Elasticsearch engine as a part of a dynamic infrastructure as a log storage or as a main database are faced with problems during  autoscaling . In fact  common Load Balancers as <a href="http://nginx.org/">Nginx</a>  used http balancing  between Elasticsearch node pool and  senders. But in this case it is possible to faced with many problems caused by service discovery during autoscaling or failed node exclusion . It is  mean that data nodes list may be inconsistent because node may be up and running but non-operational, overloaded or dropped/excluded from cluster. So simple healthchecks useless in this cases as well as simple service discovery.\nOur proposition is usual - simplify everything as much as possible . \nOur goal - keep things  simple! So let`s do Elasticsearch input data and requests balancing.     </p>\n<p>In this article we will use Elasticsearch <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-nodes.html">CAT node API</a> it is a part of powerfull <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cat.html">CAT</a>  api that is a header search mechanisms over Elasticsearch engine. We will use our lovely  gobetween to balance traffic between <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> (data) nodes  in Elasticsearch cluster for inserting/selecting  big amount of data and holding big request quantity especially in case of using autoscaling.</p>\n<p><img src="http://i.piccy.info/i9/22161abca6d14ba661194819805db8eb/1466846714/32781/1006107/elastic_gobetween.png" alt="">  </p>\n<p>We need:\n1) Client node  especially for  Gobetween . This node will be our request router for our data node discovery service. \nFor this during adding client node to cluster add following to elasticsearch.conf</p>\n<pre><code> node.master: false\n node.data: false \n</code></pre><p>2) discovery script</p>\n<p>exec discovery will looks like :</p>\n<pre><code> #!/bin/bash\n curl -sS -XGET &#39;http://PI_OF_YOUR_CLIENT_NODE:9200/_cat/nodes?v&amp;h=ip,r=d&#39; |sed &#39;1d&#39;|tr -d &#39; &#39;|sed &#39;s/$/:9200/&#39;\n</code></pre><p>it should have output like:</p>\n<pre><code> 10.0.0.51:9200\n 10.0.0.55:9200\n 10.0.0.53:9200\n 10.0.0.52:9200\n 10.0.0.54:9200\n etc ….\n</code></pre><p>3) Let&#39;s configure Gobetween for balancing between data nodes . We will use exec discovery method and round robin algorithm . This is a simple use case and you feel free to use more complicated methods with weights and dynamically generated discovery lists.\nBut let`s start to balance :</p>\n<p>After installation Gobetween described earlier  let`s configure it:</p>\n<p>Our gobetween conf will looks like:</p>\n<pre><code> [servers.sample3]\n bind = &quot;100.100.1.5:9200&quot;\n protocol = &quot;tcp&quot;\n balance = &quot;weight&quot;\n [servers.sample3.discovery]\n kind = &quot;exec&quot;\n exec_command = [&quot;/etc/gobetween/discovery_elasticsearch.sh&quot;] \n interval=&quot;1m&quot;\n timeout = &quot;10s&quot;                            \n\n [servers.sample3.healthcheck]\n fails = 1                      \n passes = 1\n interval = &quot;2s&quot;                \n kind = &quot;exec&quot;\n exec_command = &quot;/etc/gobetween/healthcheck_elasticsearch.sh&quot; \n exec_expected_positive_output = &quot;1&quot;\n exec_expected_negative_output = &quot;0&quot;\n timeout = &quot;1s&quot;\n</code></pre><p>Conclusion</p>\n<p>In this examaple not shown weight balancing for data nodes.\nYou can write more complex script or use any Elasticsearch Analyzer mechanisms that allow you play with node weight depends on loads in them or it&#39;s free calculation capacity.</p>\n'},function(e,t){e.exports='<p>Healthchecks are used for determine service status of backend nodes pool.\nIf discovery return only a nodes list and there are no healthchecks on discovery service side it needs to use\nmechanism to determine service real status (failed or ok ). In this case healthchecks can be used.\nThere are two different type of healthchecks in gobetween.</p>\n<p><strong>Healthchecks are optional since 0.2 release.</strong> </p>\n<p>If there are no healthcheck server section defined - backend nodes marked as &quot;ok&quot; and can be deleted from backend according to discovery rules  and intervals</p>\n<h3 id="ping">ping</h3>\n<p>This is a simple healthcheck. It is simple sheck connection to backend nodes by initiate new connection from gobetween side to each backend node from discovery list. In case of  connection created successfully - check passed. This is a simple mechanism. Checks success are  only  mean that connection created . No data verification made during this checks.</p>\n<p>Example of ping healthcheck:</p>\n<pre><code class="lang-toml">[servers.default.healthcheck]\nkind = &quot;ping&quot;\ninterval = &quot;2s&quot;\nping_timeout_duration = &quot;500ms&quot;\n</code></pre>\n<h3 id="exec">exec</h3>\n<p>This is a more complicated healthcheck type. During Gobetween development we made a decision provide users a flexible mechanism to create own healthchecks. No one except end user know how exactly check service status of nodes in discovery pools. There are uncountable quantity of usage cases and services. Anyone can create it&#39;s own script and call it as healthcheck. Script execute by gobetween with arguments: <code>/path/to/script [ip] [port]</code> output of script to stdout should be <code>1</code> if check passed successfully and <code>0</code> if failed by default (may be overriden).  </p>\n<p>Example of exec healthcheck:</p>\n<pre><code class="lang-toml">[servers.default.healthcheck] \nkind = &quot;exec&quot;\ninterval = &quot;2s&quot;  \nexec_command = &quot;/usr/share/exec_healthcheck.sh&quot;  # (required) command to execute\nexec_expected_positive_output = &quot;1&quot;           # (required) expected output of command in case of success\nexec_expected_negative_output = &quot;0&quot;           # (required) expected output of command in case of failure\nexec_timeout_duration = &quot;1s&quot;                  # (required) max time for script to execute until mark as failed\n</code></pre>\n<h3 id="examples">Examples</h3>\n<p>Please note that in all operating systems healthcheck response should not contain newline after output result.</p>\n<h4 id="windows">Windows</h4>\n<p>healthcheck.bat</p>\n<pre><code>@ECHO OFF\necho|set /p Dummy=1\n</code></pre><h4 id="linux-actually-any-unix-family-">Linux (Actually any Unix family)</h4>\n<p>healthcheck.sh</p>\n<pre><code class="lang-bash">#!/usr/bin/env bash\necho -n 1 ;\n</code></pre>\n'},function(e,t){e.exports='<p><strong>For latest docs please refer to links in the sidebar on the right</strong></p>\n<h2 id="architecture">Architecture</h2>\n<p><img src="http://i.piccy.info/i9/8b92154435be32f21eaa3ff7b3dc6d1c/1466244332/74457/1043487/gog.png" alt="gobetween" /></p>\n'},function(e,t){e.exports='<ul>\n<li><a href="#linux-binary">Linux Binary</a></li>\n<li><a href="#linux-from-sources">Linux From Sources</a></li>\n<li><a href="#docker">Docker</a></li>\n<li><a href="#windows-binary">Windows Binary</a></li>\n</ul>\n<h2 id="linux-binary">Linux Binary</h2>\n<h3 id="download-latest-version">Download latest version</h3>\n<h4 id="for-x86">for x86</h4>\n<pre><code class="lang-bash">$ curl -s https://api.github.com/repos/yyyar/gobetween/releases | grep browser_download_url | grep linux_386 | cut -d &#39;&quot;&#39; -f 4 | wget -i -\n</code></pre>\n<h4 id="for-amd64">for amd64</h4>\n<pre><code class="lang-bash">$ curl -s https://api.github.com/repos/yyyar/gobetween/releases | grep browser_download_url | grep linux_amd64 | cut -d &#39;&quot;&#39; -f 4 | wget -i -\n</code></pre>\n<h3 id="unzip">Unzip</h3>\n<pre><code class="lang-bash">$ tar -zxvf *.tar.gz\n$ cd gobetween*\n</code></pre>\n<h3 id="configure">Configure</h3>\n<pre><code class="lang-bash">vim config/gobetween.toml\n</code></pre>\n<h3 id="run">Run</h3>\n<pre><code class="lang-bash">$ sudo gobetween -c config/gobetween.toml\n</code></pre>\n<h2 id="linux-from-sources">Linux from sources</h2>\n<h3 id="install">Install</h3>\n<pre><code class="lang-bash">$ git clone git@github.com:yyyar/gobetween.git\n$ make\n$ sudo -E make install\n$ vim /etc/gobetween.toml\n$ gobetween -c /etc/gobetween.toml\n</code></pre>\n<h3 id="uninstall">Uninstall</h3>\n<pre><code class="lang-bash">sudo make uninstall\n</code></pre>\n<h2 id="docker">Docker</h2>\n<p>Pull image from public Docker Hub</p>\n<pre><code class="lang-bash">$ docker pull yyyar/gobetween\n</code></pre>\n<p>Specify port mappings (80 docker host port to 80 container port ) and place <code>gobetween.toml</code> to <code>/path/to/gobetween.toml</code></p>\n<pre><code class="lang-bash">$ docker run -p 80:80 -v /path/to/conf/gobetween.toml:/etc/gobetween/conf/:rw yyyar/gobetween\n</code></pre>\n<h2 id="windows-binary">Windows Binary</h2>\n<pre><code>c:\\path\\to\\gobetween -c c:\\path\\to\\gobetween.toml\n</code></pre>'},function(e,t){e.exports='<p><img src="http://i.piccy.info/i9/c80788698d935682172e3d54a39b1a3d/1465302438/18505/1041433/10_MIN_test.png" alt=""></p>\n<p><img src="http://i.piccy.info/i9/885ae1fb49e098db523dac844bb14444/1465302487/18985/1041433/10_min_traffic_values.png" alt=""></p>\n<p>Test environment :</p>\n<pre><code>      8 core 16 thread Intel(R) Xeon(R) CPU  L5630  @ 2.13GHz\n</code></pre><p>Test tool : <a href="https://github.com/wg/wrk">WRK</a></p>\n<p>Test rperformed with command:</p>\n<pre><code>wrk -c10000 -d600 -t8 http://$IP:80/index.html\n</code></pre><p>As a backends we using 3 docker containers with Nginx with static page.</p>\n<pre><code> user  nginx;\n worker_processes  4;\n error_log  /var/log/nginx/error.log warn;\n pid        /var/run/nginx.pid;\n events {\n worker_connections  4096;\n }\n http {\n include       /etc/nginx/mime.types;\n default_type  application/octet-stream;\n log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n                 &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n                 &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;; \n access_log  /var/log/nginx/access.log  main; \n sendfile        on;\n keepalive_timeout  65;\n include /etc/nginx/conf.d/*.conf;\n }\n</code></pre><p>Testing was done with Gobetween  ,  Haproxy  1.6 and Nginx 1.11.1 \nGobetween config :</p>\n<pre><code>[logging]\nlevel = &quot;info&quot; \noutput = &quot;stdout&quot; \n[globals]\n[defaults] \nmax_connections = 0\nclient_idle_timeout = &quot;30s&quot;\nbackend_idle_timeout = &quot;30s&quot;\nbackend_connection_timeout = &quot;30s&quot;\n[servers]\n\n[servers.sample3]\nbind = «$ip:80&quot;\nprotocol = &quot;tcp&quot;\nbalance = &quot;weight&quot;\n[servers.sample3.healthcheck]\ntimeout = &quot;5s&quot;\nkind = &quot;exec&quot;\ninterval = &quot;7s&quot;\nexec_command = &quot;./exec_healthcheck.sh&quot;\nexec_expected_positive_output = &quot;1&quot;\nexec_expected_negative_output = &quot;0&quot;\nexec_expected_output = &quot;1&quot;\nexec_timeout_duration = &quot;2s&quot;\n\n[servers.sample3.discovery]\nkind = &quot;docker&quot;\ndocker_endpoint = &quot;http://127.0.0.1:2375&quot;\ndocker_container_label = &quot;proxied=true&quot;\ndocker_container_private_port = 80\ndocker_cache_ttl = &quot;20s&quot;\n</code></pre><p>HAPROXY Config :</p>\n<pre><code>global\nlog 127.0.0.1 local0 notice\nmaxconn 200000\nuser haproxy\ngroup haproxy\ndefaults\nlog     global\nmode    http\noption  httplog\noption  dontlognull\nretries 3\noption redispatch\ntimeout connect  5000\ntimeout client  10000\ntimeout server  10000\n\nlisten appname $ip:80\nmaxconn 200000\nmode http\nstats enable\nstats uri /haproxy?stats\nstats realm Strictly\\ Private\nstats auth A_Username:YourPassword\nstats auth Another_User:passwd\nbalance roundrobin\noption httpclose\noption forwardfor\nserver lamp1 172.17.0.2:80 check\nserver lamp2 172.17.0.3:80 check\nserver lamp3 172.17.0.4:80 check\n</code></pre><p>Nginx LB config</p>\n<pre><code>user nginx nginx;\nworker_processes 8;\nerror_log /var/log/nginx/error_log info;\nevents {\nworker_connections 4096;\nuse epoll;\n}\nstream {\nupstream backend {\nserver 172.17.0.2:80 weight=1;\nserver 172.17.0.3:80 weight=5;\nserver 172.17.0.4:80 weight=5;\n}\nserver {\nlisten 82;\nproxy_pass backend;\n}\n}\n</code></pre>';
},function(e,t){e.exports='<h3 id="table-of-contents">Table of Contents</h3>\n<ul>\n<li><a href="#introduction">Configuration</a></li>\n<li><a href="#errors">Errors</a></li>\n<li><a href="#general">General endpoints</a></li>\n<li><a href="#servers">Servers endpoints</a></li>\n</ul>\n<h3 id="configuration">Configuration</h3>\n<p>You can enable/disable and configure REST API port in gobetween config file in <code>[api]</code> section:</p>\n<pre><code class="lang-toml">[api]\nenabled = true  # true | false\nbind = &quot;:8888&quot;  # bind host:port\n\n  # uncomment to enable \n  #[api.basic_auth]   # (optional) Enable HTTP Basic Auth\n  #login = &quot;admin&quot;    # HTTP Auth Login\n  #password = &quot;1111&quot;  # HTTP Auth Password\n\n  # uncomment to enable\n  #[api.tls]                        # (optional) Enable HTTPS\n  #cert_path = &quot;/path/to/cert.pem&quot;  # Path to certificate\n  #key_path = &quot;/path/to/key.pem&quot;    # Path to key\n</code></pre>\n<h3 id="errors">Errors</h3>\n<p>API responds with typical HTTP codes representing success of failure of the operation:</p>\n<ul>\n<li>200 OK</li>\n<li>400 Bad Request</li>\n<li>409 Conflict</li>\n<li>500 Internal Server Error</li>\n</ul>\n<h2 id="rest-api-specification">REST API Specification</h2>\n<h3 id="general">General</h3>\n<h4 id="-get-system-information"><code>GET /</code> - System Information</h4>\n<p>Returns system information about gobetween process.</p>\n<h5 id="response">Response</h5>\n<pre><code class="lang-js">{\n    &quot;configuration&quot;: {\n        &quot;kind&quot; : String\n        // ...\n        // kind-specific data\n    },\n    &quot;pid&quot;: Integer,\n    &quot;startTime&quot;: String,\n    &quot;time&quot;: String,\n    &quot;uptime&quot;: Duration,\n    &quot;version&quot;: String\n}\n</code></pre>\n<h4 id="-get-dump-dump-current-config-to-response"><code>GET /dump</code> - Dump Current Config to Response</h4>\n<h5 id="query-params">Query Params</h5>\n<ul>\n<li>format - &quot;toml&quot; (default) | &quot;json&quot;</li>\n</ul>\n<h5 id="response">Response</h5>\n<pre><code> # TOML or JSON formatted current config\n</code></pre><h3 id="servers">Servers</h3>\n<h4 id="-get-servers-name-get-server-by-name"><code>GET /servers/&lt;name&gt;</code> - Get Server By Name</h4>\n<h5 id="response">Response</h5>\n<pre><code class="lang-js">{\n   // server definition of the same structure and format as `[servers.&lt;name&gt;]` \n   // entry in config TOML file but JSON encoded.\n}\n</code></pre>\n<h4 id="-get-servers-list-all-servers"><code>GET /servers</code> - List All Servers</h4>\n<h5 id="response">Response</h5>\n<pre><code class="lang-js">{\n    // Represents the same structure and format as `[servers]` entries in config TOML file.\n\n    &quot;&lt;name&gt;&quot;: {\n        // server definition of the same structure and format as `[servers.&lt;name&gt;]` \n        // entry in config TOML file but JSON encoded.\n    },\n\n    // other servers\n\n}\n</code></pre>\n<h4 id="-post-servers-name-create-server-with-name-name-"><code>POST /servers/&lt;name&gt;</code> - Create Server With Name <code>&lt;name&gt;</code></h4>\n<h5 id="body">Body</h5>\n<pre><code class="lang-js">{\n   // server definition of the same structure and format as `[servers.&lt;name&gt;]` \n   // entry in config TOML file but JSON encoded.\n}\n</code></pre>\n<h4 id="-delete-servers-name-delete-server"><code>DELETE /servers/&lt;name&gt;</code> - Delete Server</h4>\n<h4 id="-get-servers-name-stats-get-server-statistics"><code>GET /servers/&lt;name&gt;/stats</code> - Get Server Statistics</h4>\n<h5 id="body">Body</h5>\n<pre><code class="lang-js">{\n    &quot;active_connections&quot;: Integer,\n    &quot;rx_total&quot;: Integer,  // bytes\n    &quot;tx_total&quot;: Integer,  // bytes\n    &quot;rx_second&quot;: Integer, // bytes/second\n    &quot;tx_second&quot;: Integer, // bytes/second\n    &quot;backends&quot;: [\n        {\n            &quot;host&quot;: String,\n            &quot;port&quot;: String,\n            &quot;priority&quot;: Integer,\n            &quot;weight&quot;: Integer,\n            &quot;stats&quot;: {\n                &quot;live&quot;: Boolean,\n                &quot;total_connections&quot;: Integer,\n                &quot;active_connections&quot;: Integer,\n                &quot;refused_connections&quot;: Integer,\n                &quot;rx&quot;: Integer,  // bytes\n                &quot;tx&quot;: Integer   // bytes\n                &quot;rx_second&quot;: Integer, // bytes/second\n                &quot;tx_second&quot;: Integer, // bytes/second\n            }\n        },\n\n        // ... other backends ... \n    ]\n}\n</code></pre>\n'},function(e,t){e.exports='<p><img src="http://i.piccy.info/i9/c1ab436d6c65f957c29ff26d3ca7cc17/1465913811/28400/1043487/srv.png" alt=""></p>\n<p>We have unlimited quantity of docker containers on unknown docker nodes quantity .\nOn docker nodes we have registrator service.\nAnd yes : zookeeper+skydns or consul+registrator with native dns at the top of docker nodes.</p>\n<p>Sooooo - let&#39;s start balancing:\nIn this example we defined discovery type “srv” . Also we need to define dns server and port which will be our service discovery source. Also we need to define a service name pattern and request frequency. When all done end configured properly we will have a backend node list refreshed each N seconds . During this N seconds node health checked by healthshecks. If node disappeared(appeared) from dns - it was removed/added to backend nodes list. Actually nodes list was synced with SRV record. But healthcheck status for node does not changed. It means that if srv record contain node that actually failed - it will stay marked as failed after SRV list refresh. \nOne more important thing.  If in some reasons srv discovey failed (does not return correct response from dns server ) we may define what it needs to do with server backend nodes. If you need faile tolerance backend resistant to dns server failures add failpolicy = &quot;keeplast&quot; and tour backend stay same as last correct response from dns server.  In different situation - if you need consistency in all cases and it needs to be consistent more then return any non failed response -  add failpolicy = &quot;setempty&quot; and your node lists will be cleared and all requests to this server will be rejected</p>\n<pre><code class="lang-toml">[servers.sample2]\nbind = &quot;localhost:3001&quot;\nprotocol = &quot;tcp&quot;\nbalance = &quot;weight&quot;\n\n  [servers.sample2.discovery]\n  failpolicy = &quot;keeplast&quot;\n  kind = &quot;srv&quot;\n  srv_lookup_server = &quot;66.66.66.66:8600&quot; # dns server and port\n  srv_lookup_pattern = &quot;api.service.ireland.consul.&quot; # SRV service pattern \n\n  [servers.sample2.healthcheck]\n  fails = 1                      \n  passes = 1\n  interval = &quot;2s&quot;                \n  kind = &quot;ping&quot;\n  timeout = &quot;500ms&quot;\n</code></pre>\n<p>We have ready to go solution. You can use leastconn, or iphash as you wish.</p>\n'},function(e,t){e.exports='<h2 id="-introduction-"><strong>Introduction</strong></h2>\n<p>This Article describe service Balancing with Gobetween and Consul . We use Docker and Registrator With Consul SRV Discovery service. As a Gobetween Discovery service.</p>\n<p>Consul:</p>\n<pre><code class="lang-bash">sever1.consul.example.com 10.0.0.11 bootstrap consul server , consul agent\nsever2.consul.example.com 10.0.0.12 consul server , consul agent\nsever2.consul.example.com 10.0.0.13 consul server , consul agent\n</code></pre>\n<p>Docker nodes :</p>\n<pre><code class="lang-bash">server1.application1.example.com 10.0.1.11 application server1 Docker node1 with registrator service\nserver2.application2.example.com 10.0.1.12 application server2 Docker node2 with registrator service\nserver3.application3.example.com 10.0.1.13 application server3 Docker node3 with registrator service\n</code></pre>\n<p>Gobetween balancer:</p>\n<pre><code class="lang-text">lb.exampe.com load balancer server will have 3 interfaces:\neth0 with wan address 55.55.55.55 , eth1 with 10.0.0.5 address and eth2 with 10.0.1.5\n</code></pre>\n<h2 id="consul-cluster-deployment">Consul cluster deployment</h2>\n<p>First of all need to install Consul on server(N).consul.example.com:</p>\n<p>Download Consul package from <a href="https://consul.io">https://consul.io</a> </p>\n<pre><code class="lang-bash">#wget https://releases.hashicorp.com/consul/0.6.4/consul_0.6.4_linux_amd64.zip\n#unzip *.zip\n#mv consul /usr/sbin/consul\n</code></pre>\n<p>Test your consul binary</p>\n<pre><code class="lang-bash">#consul --version\nConsul v0.6.4\nConsul Protocol: 3 (Understands back to: 1)\n</code></pre>\n<p><strong>After installation Consul on all servers let`s prepare consul cluster for initial start</strong></p>\n<p>First оf all need to generate token for our cluster:</p>\n<pre><code class="lang-bash">#consul keygen\nozgffIYeX6owI0215KWR5Q==\n</code></pre>\n<p>Add consul user:</p>\n<pre><code class="lang-bash">#adduser consul\n</code></pre>\n<p>Creating consul configuration directorines:</p>\n<pre><code class="lang-bash">#mkdir -p /etc/consul.d/{bootstrap,server,client}\n</code></pre>\n<p>Creating Consul Data directories :</p>\n<pre><code class="lang-bash">#mkdir /var/consul\n#chown consul:consul /var/consul\n</code></pre>\n<p>On bootstrap node (sever1.consul.example.com) need to create bootstrap config:</p>\n<p>/etc/consul.d/bootstrap/config.json</p>\n<pre><code class="lang-text">{\n    &quot;bootstrap&quot;: true,\n    &quot;server&quot;: true,\n    &quot;datacenter&quot;: &quot;production&quot;,\n    &quot;data_dir&quot;: &quot;/var/consul&quot;,\n    &quot;encrypt&quot;: &quot;&quot;,\n    &quot;log_level&quot;: &quot;INFO&quot;,\n     &quot;encrypt&quot;:ozgffIYeX6owI0215KWR5Q==,\n    &quot;enable_syslog&quot;: true\n}\n</code></pre>\n<p>On all Сonsul servers need to create server config in /etc/consul.d/server/config.json:</p>\n<p>Server1:</p>\n<pre><code class="lang-text">{\n    &quot;bootstrap&quot;: false,\n    &quot;server&quot;: true,\n    &quot;datacenter&quot;: &quot;production&quot;,\n    &quot;data_dir&quot;: &quot;/var/consul&quot;,\n    &quot;encrypt&quot;: &quot;ozgffIYeX6owI0215KWR5Q==&quot;,\n    &quot;log_level&quot;: &quot;INFO&quot;,\n    &quot;enable_syslog&quot;: true,\n    &quot;start_join&quot;: [&quot;10.0.0.12&quot;, &quot;10.0.0.13&quot;]\n}\n</code></pre>\n<p>Server2</p>\n<pre><code class="lang-text">{\n    &quot;bootstrap&quot;: false,\n    &quot;server&quot;: true,\n    &quot;datacenter&quot;: &quot;production&quot;,\n    &quot;data_dir&quot;: &quot;/var/consul&quot;,\n    &quot;encrypt&quot;: &quot;ozgffIYeX6owI0215KWR5Q==&quot;,\n    &quot;log_level&quot;: &quot;INFO&quot;,\n    &quot;enable_syslog&quot;: true,\n    &quot;start_join&quot;: [&quot;10.0.0.11&quot;, &quot;10.0.0.13&quot;]\n}\n</code></pre>\n<p>Server3:</p>\n<pre><code class="lang-text">{\n    &quot;bootstrap&quot;: false,\n    &quot;server&quot;: true,\n    &quot;datacenter&quot;: &quot;production&quot;,\n    &quot;data_dir&quot;: &quot;/var/consul&quot;,\n    &quot;encrypt&quot;: &quot;ozgffIYeX6owI0215KWR5Q==&quot;,\n    &quot;log_level&quot;: &quot;INFO&quot;,\n    &quot;enable_syslog&quot;: true,\n    &quot;start_join&quot;: [&quot;10.0.0.11&quot;, &quot;10.0.0.12&quot;]\n}\n</code></pre>\n<p>Next we will create upstart script on all consul servers  :\n /etc/init/consul:</p>\n<pre><code class="lang-init">description &quot;Consul server process&quot;\n\nstart on (local-filesystems and net-device-up IFACE=eth0)\nstop on runlevel [!12345]\n\nrespawn\n\nsetuid consul\nsetgid consul\n\nexec consul agent -config-dir /etc/consul.d/server\n</code></pre>\n<p>Bootstrap cluster :\nOn sever1.consul.example.com:</p>\n<pre><code class="lang-bash">#consul agent -config-dir /etc/consul.d/bootstrap\n</code></pre>\n<p>The service should start up and occupy the terminal window. In bootstrap mode, this server will self-elect as leader, creating a basis for forming the cluster.</p>\n<p>On another two servers (sever2.consul.example.com, sever3.consul.example.com) Simply run consul cluster</p>\n<pre><code class="lang-bash">#start consul\n</code></pre>\n<p>These servers will connect to the bootstrapped server, completing the cluster. At this point, we have a cluster of three servers, two of which are operating normally, and one of which is in bootstrap mode, meaning that it can make executive decisions without consulting the other servers.</p>\n<p>On bootstrap nod press</p>\n<pre><code class="lang-text">CTRL-C\n</code></pre>\n<p>And re-start bootstrap node as usual node :</p>\n<p>sever1.consul.example.com:</p>\n<pre><code class="lang-bash">#consul start\n</code></pre>\n<p>Test Consul cluster with command:</p>\n<pre><code class="lang-bash">#consul members -rpc-addr=10.0.0.11:8400\n\nOutput should be:\nNode           Address          Status  Type    Build  Protocol  DC\nserver1.consul.example.com  10.0.0.11:8301  alive   server  0.6.4  2        production\nserver2.consul.example.com  10.0.0.12:8301  alive   server  0.6.4  2        production\nserver3.consul.example.com  10.0.0.13:8301  alive   server  0.6.4  2        production\n</code></pre>\n<p>So, our cluster  up and running</p>\n<p>##Servers preparation  for application servers start </p>\n<p>We need run docker containers on our Application servers nodes:\nFor this it needs to  install docker on all  application servers:</p>\n<pre><code class="lang-text">server1.application1.example.com \n\nserver2.application2.example.com \n\nserver3.application3.example.com\n</code></pre>\n<p>###Installing docker :</p>\n<pre><code class="lang-bash"># sudo apt-get update\n\n# sudo apt-get install apt-transport-https ca-certificates\n\n#sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\n\n#echo “deb https://apt.dockerproject.org/repo ubuntu-trusty main” &gt; /etc/apt/sources.list.d/docker.list\n\n#sudo apt-get update\n\n#sudo apt-get purge lxc-docker\n\n#apt-cache policy docker-engine\n\n#sudo apt-get update\n\n#sudo apt-get install linux-image-extra-$(uname -r)\n\n#apt-get install apparmor\n\n#sudo apt-get install docker-engine\n\n#sudo docker run hello-world\n</code></pre>\n<p>###Installing Registrator :</p>\n<p>Simply run container with registrator on each docker node </p>\n<pre><code class="lang-docker">docker run -d \\\n    --name=registrator \\\n    --net=host \\\n    --volume=/var/run/docker.sock:/tmp/docker.sock \\\n    gliderlabs/registrator:latest \\\n      consul://10.0.1.5:8500\n</code></pre>\n<p>Now we are ready for running application containers</p>\n<p>###Prepare and start mock services  containers</p>\n<p>For testing needs we will run nginx default containers :</p>\n<p>Lets`s create simple html file to be able recognize  difference between servers and services during proxy testing.</p>\n<p>For this need to create  /tmp/test.html file on docker host maschine. Add ip address and service name into it. </p>\n<p>For  server1.application1.example.com  it will seems like:</p>\n<p>/tmp/test/test_service.html</p>\n<pre><code>  Server1.application1.example.com service1\n</code></pre><p>/tmp/test2/test_service.html</p>\n<pre><code>  Server1.application1.example.com service2\n</code></pre><p>For  server2.application1.example.com  it will seems like:</p>\n<p>/tmp/test/test_service.html</p>\n<pre><code>  Server2.application1.example.com service1\n</code></pre><p>/tmp/test2/test_service.html</p>\n<pre><code>  Server2.application1.example.com service2\n</code></pre><p>For  server3.application1.example.com  it will seems like:</p>\n<p>/tmp/test/test_service.html</p>\n<pre><code>  Server3.application1.example.com service1\n</code></pre><p>/tmp/test2/test_service.html</p>\n<pre><code>  Server3.application1.example.com service2\n</code></pre><p>Next we will use nginx default container as a test service containers</p>\n<p>Create two containers on each docker node :</p>\n<p>Server1.application1.example.com:</p>\n<pre><code class="lang-bash">docker run -l proxied=true -d -p 22001:80 -e &quot;SERVICE_80_NAME=service1&quot; -v /tmp/test:/usr/share/nginx/html:ro nginx\n\ndocker run -l proxied=true -d -p 23001:80 -e &quot;SERVICE_80_NAME=service2&quot; -v /tmp/test2:/usr/share/nginx/html:ro nginx\n</code></pre>\n<p>Server2.application1.example.com</p>\n<pre><code class="lang-bash">docker run -l proxied=true -d -p 22002:80 -e &quot;SERVICE_80_NAME=service1&quot; -v /tmp/test:/usr/share/nginx/html:ro nginx\n\ndocker run -l proxied=true -d -p 23002:80 -e &quot;SERVICE_80_NAME=service2&quot; -v /tmp/test2:/usr/share/nginx/html:ro nginx\n</code></pre>\n<p>Server3.application1.example.com</p>\n<pre><code class="lang-bash">docker run -l proxied=true -d -p 22003:80 -e &quot;SERVICE_80_NAME=service1&quot; -v /tmp/test:/usr/share/nginx/html:ro nginx\n\ndocker run -l proxied=true -d -p 23003:80 -e &quot;SERVICE_80_NAME=service2&quot; -v /tmp/test2:/usr/share/nginx/html:ro nginx\n</code></pre>\n<p>We have consul cluster , registrator , docker nodes with mock services, so we are ready to deploy load balancer with service discovery.</p>\n<p>##Gobetween Service LB installation and configuration</p>\n<p>Download gobetween latest release from github:</p>\n<p><a href="Gobetween releases page">https://github.com/yyyar/gobetween/releases</a></p>\n<pre><code class="lang-bash">#wget https://github.com/yyyar/gobetween/releases/download/0.1.0/gobetween_0.1.0.dev_linux_amd64.tar.gz\n#tar -zxvf gobetween_0.1.0.dev_linux_amd64.tar.gz gobetween\n</code></pre>\n<p>Copy binary to /usr/sbin/</p>\n<pre><code class="lang-bash">#cp gobetween /usr/sbin/\n</code></pre>\n<p>Also download init script:</p>\n<pre><code class="lang-bash">#wget https://github.com/yyyar/gobetween/blob/master/config/init/gobetween.conf\n</code></pre>\n<p>Next need to place it into /etc/init/ directory </p>\n<p>And let`s create config for our service discovery cases and also for consul cluster.</p>\n<p>For consul cluster config will looks like:</p>\n<pre><code class="lang-toml">[servers.sample]\nbind = &quot;10.0.1.5:8500&quot;\nprotocol = &quot;tcp&quot; \nbalance = &quot;roundrobin&quot;\n\nmax_connections = 100\nclient_idle_timeout = &quot;10m&quot;\nbackend_idle_timeout = &quot;10m&quot;\nbackend_connection_timeout = &quot;5s&quot;\n\n    [servers.sample.discovery]\n    kind = &quot;static&quot;\n    static_list = [\n      &quot;10.0.0.11:8500 weight=1&quot;,\n      &quot;10.0.0.12:8500 weight=1&quot;,\n      &quot;10.0.0.13:8500 weight=1&quot;\n    ]\n\n    [servers.sample.healthcheck]\n    fails = 1                      \n    passes = 1\n    interval = &quot;2s&quot;   \n    timeout=&quot;1s&quot;             \n    kind = &quot;ping&quot;\n    ping_timeout_duration = &quot;500ms&quot;\n</code></pre>\n<p>let`s build service discovery based on this configuration :\nThis example query consul DNS server on 10.0.0.11 (GOBETWEEN currently not supported UDP balancing so we will use single servers query) consul node for service1 and service2 list with external ports</p>\n<pre><code class="lang-toml">[servers.sample2]\nbind = &quot;55.55.55.55:2000&quot;\nprotocol = &quot;tcp&quot;\nbalance = &quot;weight&quot;\n\n  [servers.sample2.discovery]\n  failpolicy = &quot;keeplast&quot;\n  kind = &quot;srv&quot;\n  srv_lookup_server = &quot;10.0.0.11:8600&quot; # dns server and port\n  srv_lookup_pattern = &quot;service1.service.production.consul.&quot; # SRV service pattern \n\n  [servers.sample2.healthcheck]\n  fails = 1                      \n  passes = 1\n  interval = &quot;2s&quot;                \n  kind = &quot;ping&quot;\n  timeout = &quot;500ms&quot;\n\n\n[servers.sample3]\nbind = &quot;55.55.55.55:2001&quot;\nprotocol = &quot;tcp&quot;\nbalance = &quot;weight&quot;\n\n  [servers.sample3.discovery]\n  failpolicy = &quot;keeplast&quot;\n  kind = &quot;srv&quot;\n  srv_lookup_server = &quot;10.0.0.11:8600&quot; # dns server and port\n  srv_lookup_pattern = &quot;service2.service.production.consul.&quot; # SRV service pattern \n\n  [servers.sample3.healthcheck]\n  fails = 1                      \n  passes = 1\n  interval = &quot;2s&quot;                \n  kind = &quot;ping&quot;\n  timeout = &quot;500ms&quot;\n</code></pre>\n<p>Let`s start Gobetween</p>\n<pre><code class="lang-bash">#start gobetween\n</code></pre>\n<p>##Discovery test</p>\n<p>Check consul dns </p>\n<pre><code class="lang-bash">#dig @10.0.0.11 -p 8600  service1.service.production.consul SRV\n\n &lt;&lt;&gt;&gt; DiG 9.9.5-3ubuntu0.6-Ubuntu &lt;&lt;&gt;&gt; @10.0.0.11 -p 8600 service1.service.production.consul SRV\n; (1 server found)\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 1820\n;; flags: qr aa rd; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 3\n;; WARNING: recursion requested but not available\n\n;; QUESTION SECTION:\n;service1.service.production.consul.    IN    SRV\n\n;; ANSWER SECTION:\nservice1.service.production.consul.    0 IN    SRV    1 1 22001 server1.application1.example.com.node.production.consul.\nservice1.service.production.consul.    0 IN    SRV    1 1 22002 server2.application1.example.com.node.production.consul.\nservice1.service.production.consul.    0 IN    SRV    1 1 22002 server3.application1.example.com.node.production.consul.\n\n;; ADDITIONAL SECTION:\nserver1.application1.example.com.node.production.consul. 0 IN A    10.0.1.11\nserver2.application1.example.com.node.production.consul. 0 IN A    10.0.1.12\nserver3.application1.example.com.node.production.consul. 0 IN A    10.0.1.13\n</code></pre>\n<pre><code class="lang-bash">#dig @10.0.0.11 -p 8600  service2.service.production.consul SRV\n\nOutput shold be like:\n\n &lt;&lt;&gt;&gt; DiG 9.9.5-3ubuntu0.6-Ubuntu &lt;&lt;&gt;&gt; @10.0.0.11 -p 8600 service1.service.production.consul SRV\n; (1 server found)\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 1820\n;; flags: qr aa rd; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 3\n;; WARNING: recursion requested but not available\n\n;; QUESTION SECTION:\n;service2.service.production.consul.    IN    SRV\n\n;; ANSWER SECTION:\nservice2.service.production.consul.    0 IN    SRV    1 1 23001 server1.application1.example.com.node.production.consul.\nservice2.service.production.consul.    0 IN    SRV    1 1 23002 server2.application1.example.com.node.production.consul.\nservice2.service.production.consul.    0 IN    SRV    1 1 23002 server3.application1.example.com.node.production.consul.\n\n;; ADDITIONAL SECTION:\nserver1.application1.example.com.node.production.consul. 0 IN A    10.0.1.11\nserver2.application1.example.com.node.production.consul. 0 IN A    10.0.1.12\nserver3.application1.example.com.node.production.consul. 0 IN A    10.0.1.13\n</code></pre>\n<p>##Service discovery balancing test</p>\n<p>If so - that mean that registrators on all nodes successfully register services in consul cluster.</p>\n<p>And we ready to test our services:\nCheck 55.55.55.55:2000 and 55.55.55.55:2000 \nOutput will be like:</p>\n<pre><code class="lang-bash">#curl -s http://55.55.55.55:2000/test_service.html\nServer1.application1.example.com service1\n##curl -s http://55.55.55.55:2000/test_service.html\nServer2.application1.example.com service1\n#curl -s http://55.55.55.55:2000/test_service.html\nServer3.application1.example.com service1\nEtc…\n#curl -s http://55.55.55.55:2001/test_service.html\nServer1.application1.example.com service2\n##curl -s http://55.55.55.55:2001/test_service.html\nServer2.application1.example.com service2\n#curl -s http://55.55.55.55:2001/test_service.html\nServer3.application1.example.com service2\n</code></pre>\n<p>Try to stop few containers and check that it will be disappeared from consul dns as well as from gobetween discovery.</p>\n'},function(e,t){e.exports='<p>For example, we need to balance three nodes/backends. </p>\n<p><img src="http://i.piccy.info/i9/4f0b4f9b1a5ba56b6a0559a17d611c5b/1465913152/19993/1043487/simple.png" alt=""></p>\n<p>We need to define our first gobetween server: </p>\n<pre><code class="lang-toml">[servers.sample]\nbind = &quot;100.100.1.5:3000&quot;\nprotocol = &quot;tcp&quot;\nbalance = &quot;weight&quot;\n\nmax_connections = 10000\nclient_idle_timeout = &quot;10m&quot;\nbackend_idle_timeout = &quot;10m&quot;\nbackend_connection_timeout = &quot;2s&quot;\n\n[servers.sample.discovery]\nkind = &quot;static&quot;\nstatic_list = [\n    &quot;10.0.0.2:22399 weight=5&quot;,\n    &quot;10.0.0.3:22499 weight=3&quot;,\n    &quot;10.0.0.5:32399 weight=1&quot;\n]\n</code></pre>\n<p>And it needs to define health check method  in our sample it is tcp ping method. It means that each period of time defined in “interval” gobetween trying to open test session to each backend node from list and based on check success|fail mark node healthy or failed after N fails defined in “fails” variable , and restore it after T success checks defined in “passes” variable and if so - exclude it  balancing list or include it  again.  </p>\n<pre><code class="lang-toml">[servers.sample.healthcheck]\nfails = 1                      \npasses = 1\ninterval = &quot;2s&quot;                \nkind = &quot;ping&quot;\nping_timeout_duration = &quot;500ms&quot;\n</code></pre>\n<p>Final version of our config will be:</p>\n<pre><code class="lang-toml">\n[servers.sample]\nbind = &quot;localhost:3000&quot;\nprotocol = &quot;tcp&quot; \nbalance = &quot;roundrobin&quot;\n\nmax_connections = 10000\nclient_idle_timeout = &quot;10m&quot;\nbackend_idle_timeout = &quot;10m&quot;\nbackend_connection_timeout = &quot;2s&quot;\n\n    [servers.sample.discovery]\n    kind = &quot;static&quot;\n    static_list = [\n      &quot;10.0.0.2:22399 weight=5&quot;,\n      &quot;10.0.0.3:22499 weight=3&quot;,\n      &quot;10.0.0.5:32399 weight=1&quot;\n    ]\n\n    [servers.sample.healthcheck]\n    fails = 1                      \n    passes = 1\n    interval = &quot;2s&quot;   \n    timeout=&quot;1s&quot;             \n    kind = &quot;ping&quot;\n    ping_timeout_duration = &quot;500ms&quot;\n</code></pre>\n'},function(e,t){e.exports='<p><strong><em>(since 0.4.0)</em></strong></p>\n<p>You can configure gobetween to listen TLS and perform TLS termination so traffic would be decrypted and passed through TCP to backends.</p>\n<p>You just need to set you server protocol to tls and configure tls section:</p>\n<pre><code class="lang-toml">[servers.default]\nprotocol = &quot;tls&quot;\n\n  [servers.default.tls]             # (required) if protocol == &quot;tls&quot;\n  cert_path = &quot;/path/to/file.crt&quot;   # (required) path to crt file\n  key_path = &quot;/path/to/file.key&quot;    # (required) path to key file\n  min_version = &quot;tls1&quot;              # (optional) &quot;ssl3&quot; | &quot;tls1&quot; | &quot;tls1.1&quot; | &quot;tls1.2&quot; - minimum allowed tls version\n  max_version = &quot;tls1.2&quot;            # (optional) maximum allowed tls version\n  ciphers = []                      # (optional) list of supported ciphers. Empty means all supported. For a list see https://golang.org/pkg/crypto/tls/#pkg-constants\n  prefer_server_ciphers = false     # (optional) if true server selects server&#39;s most preferred cipher\n  session_tickets = true            # (optional) if true enables session tickets\n</code></pre>\n'},function(e,t){e.exports='<p>Windows version config have few things should be noted to prepare proper config file.\nExec discovery path an  exec healthcheck path should be added with single quotes. </p>\n<h1 id="linux">Linux</h1>\n<pre><code class="lang-toml">exec_command = &quot;/etc/gobetween/healthchecks/exec_healthcheck.sh&quot;\nexec_command = [&quot;/etc/gobetween/scripts/discovery/exec_discovery.sh&quot;, &quot;arg1&quot;, &quot;arg2&quot;]\n</code></pre>\n<h1 id="windows">Windows</h1>\n<pre><code class="lang-toml"> exec_command = &#39;C:\\gobetween\\scripts\\healthchecks\\exec_healthcheck.bat&#39;\n exec_command = [&#39;C:\\gobetween\\scripts\\discovery\\exec_discovery.bat&#39;, &#39;arg1&#39;, &#39;arg2&#39;]\n</code></pre>\n'},function(e,t){"use strict";function n(e){var t=/^#?([a-f\d])([a-f\d])([a-f\d])$/i;e=e.replace(t,function(e,t,n,o){return t+t+n+n+o+o});var n=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return n?{r:parseInt(n[1],16),g:parseInt(n[2],16),b:parseInt(n[3],16)}:null}function o(e,t,n){return Math.min(Math.max(e,t),n)}function r(e,t){return t.indexOf(e)>-1}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=function a(e,t){var s=document.querySelector("#"+e+" > .particles-js-canvas-el");this.pJS={canvas:{el:s,w:s.offsetWidth,h:s.offsetHeight},particles:{number:{value:400,density:{enable:!0,value_area:800}},color:{value:"#fff"},shape:{type:"circle",stroke:{width:0,color:"#ff0000"},polygon:{nb_sides:5},image:{src:"",width:100,height:100}},opacity:{value:1,random:!1,anim:{enable:!1,speed:2,opacity_min:0,sync:!1}},size:{value:20,random:!1,anim:{enable:!1,speed:20,size_min:0,sync:!1}},line_linked:{enable:!0,distance:100,color:"#fff",opacity:1,width:1},move:{enable:!0,speed:2,direction:"none",random:!1,straight:!1,out_mode:"out",bounce:!1,attract:{enable:!1,rotateX:3e3,rotateY:3e3}},array:[]},interactivity:{detect_on:"canvas",events:{onhover:{enable:!0,mode:"grab"},onclick:{enable:!0,mode:"push"},resize:!0},modes:{grab:{distance:100,line_linked:{opacity:1}},bubble:{distance:200,size:80,duration:.4},repulse:{distance:200,duration:.4},push:{particles_nb:4},remove:{particles_nb:2}},mouse:{}},retina_detect:!1,fn:{interact:{},modes:{},vendors:{}},tmp:{}};var a=this.pJS;t&&Object.deepExtend(a,t),a.tmp.obj={size_value:a.particles.size.value,size_anim_speed:a.particles.size.anim.speed,move_speed:a.particles.move.speed,line_linked_distance:a.particles.line_linked.distance,line_linked_width:a.particles.line_linked.width,mode_grab_distance:a.interactivity.modes.grab.distance,mode_bubble_distance:a.interactivity.modes.bubble.distance,mode_bubble_size:a.interactivity.modes.bubble.size,mode_repulse_distance:a.interactivity.modes.repulse.distance},a.fn.retinaInit=function(){a.retina_detect&&window.devicePixelRatio>1?(a.canvas.pxratio=window.devicePixelRatio,a.tmp.retina=!0):(a.canvas.pxratio=1,a.tmp.retina=!1),a.canvas.w=a.canvas.el.offsetWidth*a.canvas.pxratio,a.canvas.h=a.canvas.el.offsetHeight*a.canvas.pxratio,a.particles.size.value=a.tmp.obj.size_value*a.canvas.pxratio,a.particles.size.anim.speed=a.tmp.obj.size_anim_speed*a.canvas.pxratio,a.particles.move.speed=a.tmp.obj.move_speed*a.canvas.pxratio,a.particles.line_linked.distance=a.tmp.obj.line_linked_distance*a.canvas.pxratio,a.interactivity.modes.grab.distance=a.tmp.obj.mode_grab_distance*a.canvas.pxratio,a.interactivity.modes.bubble.distance=a.tmp.obj.mode_bubble_distance*a.canvas.pxratio,a.particles.line_linked.width=a.tmp.obj.line_linked_width*a.canvas.pxratio,a.interactivity.modes.bubble.size=a.tmp.obj.mode_bubble_size*a.canvas.pxratio,a.interactivity.modes.repulse.distance=a.tmp.obj.mode_repulse_distance*a.canvas.pxratio},a.fn.canvasInit=function(){a.canvas.ctx=a.canvas.el.getContext("2d")},a.fn.canvasSize=function(){a.canvas.el.width=a.canvas.w,a.canvas.el.height=a.canvas.h,a&&a.interactivity.events.resize&&window.addEventListener("resize",function(){a.canvas.w=a.canvas.el.offsetWidth,a.canvas.h=a.canvas.el.offsetHeight,a.tmp.retina&&(a.canvas.w*=a.canvas.pxratio,a.canvas.h*=a.canvas.pxratio),a.canvas.el.width=a.canvas.w,a.canvas.el.height=a.canvas.h,a.particles.move.enable||(a.fn.particlesEmpty(),a.fn.particlesCreate(),a.fn.particlesDraw(),a.fn.vendors.densityAutoParticles()),a.fn.vendors.densityAutoParticles()})},a.fn.canvasPaint=function(){a.canvas.ctx.fillRect(0,0,a.canvas.w,a.canvas.h)},a.fn.canvasClear=function(){a.canvas.ctx.clearRect(0,0,a.canvas.w,a.canvas.h)},a.fn.particle=function(e,t,o){
if(this.radius=(a.particles.size.random?Math.random():1)*a.particles.size.value,a.particles.size.anim.enable&&(this.size_status=!1,this.vs=a.particles.size.anim.speed/100,a.particles.size.anim.sync||(this.vs=this.vs*Math.random())),this.x=o?o.x:Math.random()*a.canvas.w,this.y=o?o.y:Math.random()*a.canvas.h,this.x>a.canvas.w-2*this.radius?this.x=this.x-this.radius:this.x<2*this.radius&&(this.x=this.x+this.radius),this.y>a.canvas.h-2*this.radius?this.y=this.y-this.radius:this.y<2*this.radius&&(this.y=this.y+this.radius),a.particles.move.bounce&&a.fn.vendors.checkOverlap(this,o),this.color={},"object"==i(e.value))if(e.value instanceof Array){var r=e.value[Math.floor(Math.random()*a.particles.color.value.length)];this.color.rgb=n(r)}else void 0!=e.value.r&&void 0!=e.value.g&&void 0!=e.value.b&&(this.color.rgb={r:e.value.r,g:e.value.g,b:e.value.b}),void 0!=e.value.h&&void 0!=e.value.s&&void 0!=e.value.l&&(this.color.hsl={h:e.value.h,s:e.value.s,l:e.value.l});else"random"==e.value?this.color.rgb={r:Math.floor(256*Math.random())+0,g:Math.floor(256*Math.random())+0,b:Math.floor(256*Math.random())+0}:"string"==typeof e.value&&(this.color=e,this.color.rgb=n(this.color.value));this.opacity=(a.particles.opacity.random?Math.random():1)*a.particles.opacity.value,a.particles.opacity.anim.enable&&(this.opacity_status=!1,this.vo=a.particles.opacity.anim.speed/100,a.particles.opacity.anim.sync||(this.vo=this.vo*Math.random()));var s={};switch(a.particles.move.direction){case"top":s={x:0,y:-1};break;case"top-right":s={x:.5,y:-.5};break;case"right":s={x:1,y:-0};break;case"bottom-right":s={x:.5,y:.5};break;case"bottom":s={x:0,y:1};break;case"bottom-left":s={x:-.5,y:1};break;case"left":s={x:-1,y:0};break;case"top-left":s={x:-.5,y:-.5};break;default:s={x:0,y:0}}a.particles.move.straight?(this.vx=s.x,this.vy=s.y,a.particles.move.random&&(this.vx=this.vx*Math.random(),this.vy=this.vy*Math.random())):(this.vx=s.x+Math.random()-.5,this.vy=s.y+Math.random()-.5),this.vx_i=this.vx,this.vy_i=this.vy;var c=a.particles.shape.type;if("object"==(void 0===c?"undefined":i(c))){if(c instanceof Array){var l=c[Math.floor(Math.random()*c.length)];this.shape=l}}else this.shape=c;if("image"==this.shape){var u=a.particles.shape;this.img={src:u.image.src,ratio:u.image.width/u.image.height},this.img.ratio||(this.img.ratio=1),"svg__"==a.tmp.img_type&&void 0!=a.tmp.source_svg&&(a.fn.vendors.createSvgImg(this),a.tmp.pushing&&(this.img.loaded=!1))}},a.fn.particle.prototype.draw=function(){var e=this;if(void 0!=e.radius_bubble)var t=e.radius_bubble;else var t=e.radius;if(void 0!=e.opacity_bubble)var n=e.opacity_bubble;else var n=e.opacity;if(e.color.rgb)var o="rgba("+e.color.rgb.r+","+e.color.rgb.g+","+e.color.rgb.b+","+n+")";else var o="hsla("+e.color.hsl.h+","+e.color.hsl.s+"%,"+e.color.hsl.l+"%,"+n+")";switch(a.canvas.ctx.fillStyle=o,a.canvas.ctx.beginPath(),e.shape){case"circle":a.canvas.ctx.arc(e.x,e.y,t,0,2*Math.PI,!1);break;case"edge":a.canvas.ctx.rect(e.x-t,e.y-t,2*t,2*t);break;case"triangle":a.fn.vendors.drawShape(a.canvas.ctx,e.x-t,e.y+t/1.66,2*t,3,2);break;case"polygon":a.fn.vendors.drawShape(a.canvas.ctx,e.x-t/(a.particles.shape.polygon.nb_sides/3.5),e.y-t/.76,2.66*t/(a.particles.shape.polygon.nb_sides/3),a.particles.shape.polygon.nb_sides,1);break;case"star":a.fn.vendors.drawShape(a.canvas.ctx,e.x-2*t/(a.particles.shape.polygon.nb_sides/4),e.y-t/1.52,2*t*2.66/(a.particles.shape.polygon.nb_sides/3),a.particles.shape.polygon.nb_sides,2);break;case"image":var r=function(){a.canvas.ctx.drawImage(i,e.x-t,e.y-t,2*t,2*t/e.img.ratio)};if("svg__"==a.tmp.img_type)var i=e.img.obj;else var i=a.tmp.img_obj;i&&r()}a.canvas.ctx.closePath(),a.particles.shape.stroke.width>0&&(a.canvas.ctx.strokeStyle=a.particles.shape.stroke.color,a.canvas.ctx.lineWidth=a.particles.shape.stroke.width,a.canvas.ctx.stroke()),a.canvas.ctx.fill()},a.fn.particlesCreate=function(){for(var e=0;e<a.particles.number.value;e++)a.particles.array.push(new a.fn.particle(a.particles.color,a.particles.opacity.value))},a.fn.particlesUpdate=function(){for(var e=0;e<a.particles.array.length;e++){var t=a.particles.array[e];if(a.particles.move.enable){var n=a.particles.move.speed/2;t.x+=t.vx*n,t.y+=t.vy*n}if(a.particles.opacity.anim.enable&&(1==t.opacity_status?(t.opacity>=a.particles.opacity.value&&(t.opacity_status=!1),t.opacity+=t.vo):(t.opacity<=a.particles.opacity.anim.opacity_min&&(t.opacity_status=!0),t.opacity-=t.vo),t.opacity<0&&(t.opacity=0)),a.particles.size.anim.enable&&(1==t.size_status?(t.radius>=a.particles.size.value&&(t.size_status=!1),t.radius+=t.vs):(t.radius<=a.particles.size.anim.size_min&&(t.size_status=!0),t.radius-=t.vs),t.radius<0&&(t.radius=0)),"bounce"==a.particles.move.out_mode)var o={x_left:t.radius,x_right:a.canvas.w,y_top:t.radius,y_bottom:a.canvas.h};else var o={x_left:-t.radius,x_right:a.canvas.w+t.radius,y_top:-t.radius,y_bottom:a.canvas.h+t.radius};switch(t.x-t.radius>a.canvas.w?(t.x=o.x_left,t.y=Math.random()*a.canvas.h):t.x+t.radius<0&&(t.x=o.x_right,t.y=Math.random()*a.canvas.h),t.y-t.radius>a.canvas.h?(t.y=o.y_top,t.x=Math.random()*a.canvas.w):t.y+t.radius<0&&(t.y=o.y_bottom,t.x=Math.random()*a.canvas.w),a.particles.move.out_mode){case"bounce":t.x+t.radius>a.canvas.w?t.vx=-t.vx:t.x-t.radius<0&&(t.vx=-t.vx),t.y+t.radius>a.canvas.h?t.vy=-t.vy:t.y-t.radius<0&&(t.vy=-t.vy)}if(r("grab",a.interactivity.events.onhover.mode)&&a.fn.modes.grabParticle(t),(r("bubble",a.interactivity.events.onhover.mode)||r("bubble",a.interactivity.events.onclick.mode))&&a.fn.modes.bubbleParticle(t),(r("repulse",a.interactivity.events.onhover.mode)||r("repulse",a.interactivity.events.onclick.mode))&&a.fn.modes.repulseParticle(t),a.particles.line_linked.enable||a.particles.move.attract.enable)for(var i=e+1;i<a.particles.array.length;i++){var s=a.particles.array[i];a.particles.line_linked.enable&&a.fn.interact.linkParticles(t,s),a.particles.move.attract.enable&&a.fn.interact.attractParticles(t,s),a.particles.move.bounce&&a.fn.interact.bounceParticles(t,s)}}},a.fn.particlesDraw=function(){a.canvas.ctx.clearRect(0,0,a.canvas.w,a.canvas.h),a.fn.particlesUpdate();for(var e=0;e<a.particles.array.length;e++){var t=a.particles.array[e];t.draw()}},a.fn.particlesEmpty=function(){a.particles.array=[]},a.fn.particlesRefresh=function(){cancelRequestAnimFrame(a.fn.checkAnimFrame),cancelRequestAnimFrame(a.fn.drawAnimFrame),a.tmp.source_svg=void 0,a.tmp.img_obj=void 0,a.tmp.count_svg=0,a.fn.particlesEmpty(),a.fn.canvasClear(),a.fn.vendors.start()},a.fn.interact.linkParticles=function(e,t){var n=e.x-t.x,o=e.y-t.y,r=Math.sqrt(n*n+o*o);if(r<=a.particles.line_linked.distance){var i=a.particles.line_linked.opacity-r/(1/a.particles.line_linked.opacity)/a.particles.line_linked.distance;if(i>0){var s=a.particles.line_linked.color_rgb_line;a.canvas.ctx.strokeStyle="rgba("+s.r+","+s.g+","+s.b+","+i+")",a.canvas.ctx.lineWidth=a.particles.line_linked.width,a.canvas.ctx.beginPath(),a.canvas.ctx.moveTo(e.x,e.y),a.canvas.ctx.lineTo(t.x,t.y),a.canvas.ctx.stroke(),a.canvas.ctx.closePath()}}},a.fn.interact.attractParticles=function(e,t){var n=e.x-t.x,o=e.y-t.y,r=Math.sqrt(n*n+o*o);if(r<=a.particles.line_linked.distance){var i=n/(1e3*a.particles.move.attract.rotateX),s=o/(1e3*a.particles.move.attract.rotateY);e.vx-=i,e.vy-=s,t.vx+=i,t.vy+=s}},a.fn.interact.bounceParticles=function(e,t){var n=e.x-t.x,o=e.y-t.y,r=Math.sqrt(n*n+o*o),i=e.radius+t.radius;r<=i&&(e.vx=-e.vx,e.vy=-e.vy,t.vx=-t.vx,t.vy=-t.vy)},a.fn.modes.pushParticles=function(e,t){a.tmp.pushing=!0;for(var n=0;n<e;n++)a.particles.array.push(new a.fn.particle(a.particles.color,a.particles.opacity.value,{x:t?t.pos_x:Math.random()*a.canvas.w,y:t?t.pos_y:Math.random()*a.canvas.h})),n==e-1&&(a.particles.move.enable||a.fn.particlesDraw(),a.tmp.pushing=!1)},a.fn.modes.removeParticles=function(e){a.particles.array.splice(0,e),a.particles.move.enable||a.fn.particlesDraw()},a.fn.modes.bubbleParticle=function(e){if(a.interactivity.events.onhover.enable&&r("bubble",a.interactivity.events.onhover.mode)){var t=function(){e.opacity_bubble=e.opacity,e.radius_bubble=e.radius},n=e.x-a.interactivity.mouse.pos_x,o=e.y-a.interactivity.mouse.pos_y,i=Math.sqrt(n*n+o*o),s=1-i/a.interactivity.modes.bubble.distance;if(i<=a.interactivity.modes.bubble.distance){if(s>=0&&"mousemove"==a.interactivity.status){if(a.interactivity.modes.bubble.size!=a.particles.size.value)if(a.interactivity.modes.bubble.size>a.particles.size.value){var c=e.radius+a.interactivity.modes.bubble.size*s;c>=0&&(e.radius_bubble=c)}else{var l=e.radius-a.interactivity.modes.bubble.size,c=e.radius-l*s;c>0?e.radius_bubble=c:e.radius_bubble=0}if(a.interactivity.modes.bubble.opacity!=a.particles.opacity.value)if(a.interactivity.modes.bubble.opacity>a.particles.opacity.value){var u=a.interactivity.modes.bubble.opacity*s;u>e.opacity&&u<=a.interactivity.modes.bubble.opacity&&(e.opacity_bubble=u)}else{var u=e.opacity-(a.particles.opacity.value-a.interactivity.modes.bubble.opacity)*s;u<e.opacity&&u>=a.interactivity.modes.bubble.opacity&&(e.opacity_bubble=u)}}}else t();"mouseleave"==a.interactivity.status&&t()}else if(a.interactivity.events.onclick.enable&&r("bubble",a.interactivity.events.onclick.mode)){var p=function(t,n,o,r,s){if(t!=n)if(a.tmp.bubble_duration_end){if(void 0!=o){var c=r-d*(r-t)/a.interactivity.modes.bubble.duration,l=t-c;p=t+l,"size"==s&&(e.radius_bubble=p),"opacity"==s&&(e.opacity_bubble=p)}}else if(i<=a.interactivity.modes.bubble.distance){if(void 0!=o)var u=o;else var u=r;if(u!=t){var p=r-d*(r-t)/a.interactivity.modes.bubble.duration;"size"==s&&(e.radius_bubble=p),"opacity"==s&&(e.opacity_bubble=p)}}else"size"==s&&(e.radius_bubble=void 0),"opacity"==s&&(e.opacity_bubble=void 0)};if(a.tmp.bubble_clicking){var n=e.x-a.interactivity.mouse.click_pos_x,o=e.y-a.interactivity.mouse.click_pos_y,i=Math.sqrt(n*n+o*o),d=((new Date).getTime()-a.interactivity.mouse.click_time)/1e3;d>a.interactivity.modes.bubble.duration&&(a.tmp.bubble_duration_end=!0),d>2*a.interactivity.modes.bubble.duration&&(a.tmp.bubble_clicking=!1,a.tmp.bubble_duration_end=!1)}a.tmp.bubble_clicking&&(p(a.interactivity.modes.bubble.size,a.particles.size.value,e.radius_bubble,e.radius,"size"),p(a.interactivity.modes.bubble.opacity,a.particles.opacity.value,e.opacity_bubble,e.opacity,"opacity"))}},a.fn.modes.repulseParticle=function(e){if(a.interactivity.events.onhover.enable&&r("repulse",a.interactivity.events.onhover.mode)&&"mousemove"==a.interactivity.status){var t=e.x-a.interactivity.mouse.pos_x,n=e.y-a.interactivity.mouse.pos_y,i=Math.sqrt(t*t+n*n),s={x:t/i,y:n/i},c=a.interactivity.modes.repulse.distance,l=100,u=o(1/c*(-1*Math.pow(i/c,2)+1)*c*l,0,50),p={x:e.x+s.x*u,y:e.y+s.y*u};"bounce"==a.particles.move.out_mode?(p.x-e.radius>0&&p.x+e.radius<a.canvas.w&&(e.x=p.x),p.y-e.radius>0&&p.y+e.radius<a.canvas.h&&(e.y=p.y)):(e.x=p.x,e.y=p.y)}else if(a.interactivity.events.onclick.enable&&r("repulse",a.interactivity.events.onclick.mode))if(a.tmp.repulse_finish||(a.tmp.repulse_count++,a.tmp.repulse_count==a.particles.array.length&&(a.tmp.repulse_finish=!0)),a.tmp.repulse_clicking){var d=function(){var t=Math.atan2(m,h);if(e.vx=f*Math.cos(t),e.vy=f*Math.sin(t),"bounce"==a.particles.move.out_mode){var n={x:e.x+e.vx,y:e.y+e.vy};n.x+e.radius>a.canvas.w?e.vx=-e.vx:n.x-e.radius<0&&(e.vx=-e.vx),n.y+e.radius>a.canvas.h?e.vy=-e.vy:n.y-e.radius<0&&(e.vy=-e.vy)}},c=Math.pow(a.interactivity.modes.repulse.distance/6,3),h=a.interactivity.mouse.click_pos_x-e.x,m=a.interactivity.mouse.click_pos_y-e.y,v=h*h+m*m,f=-c/v*1;v<=c&&d()}else 0==a.tmp.repulse_clicking&&(e.vx=e.vx_i,e.vy=e.vy_i)},a.fn.modes.grabParticle=function(e){if(a.interactivity.events.onhover.enable&&"mousemove"==a.interactivity.status){var t=e.x-a.interactivity.mouse.pos_x,n=e.y-a.interactivity.mouse.pos_y,o=Math.sqrt(t*t+n*n);if(o<=a.interactivity.modes.grab.distance){var r=a.interactivity.modes.grab.line_linked.opacity-o/(1/a.interactivity.modes.grab.line_linked.opacity)/a.interactivity.modes.grab.distance;if(r>0){var i=a.particles.line_linked.color_rgb_line;a.canvas.ctx.strokeStyle="rgba("+i.r+","+i.g+","+i.b+","+r+")",a.canvas.ctx.lineWidth=a.particles.line_linked.width,a.canvas.ctx.beginPath(),a.canvas.ctx.moveTo(e.x,e.y),a.canvas.ctx.lineTo(a.interactivity.mouse.pos_x,a.interactivity.mouse.pos_y),a.canvas.ctx.stroke(),a.canvas.ctx.closePath()}}}},a.fn.vendors.eventsListeners=function(){"window"==a.interactivity.detect_on?a.interactivity.el=window:a.interactivity.el=a.canvas.el,(a.interactivity.events.onhover.enable||a.interactivity.events.onclick.enable)&&(a.interactivity.el.addEventListener("mousemove",function(e){if(a.interactivity.el==window)var t=e.clientX,n=e.clientY;else var t=e.offsetX||e.clientX,n=e.offsetY||e.clientY;a.interactivity.mouse.pos_x=t,a.interactivity.mouse.pos_y=n,a.tmp.retina&&(a.interactivity.mouse.pos_x*=a.canvas.pxratio,a.interactivity.mouse.pos_y*=a.canvas.pxratio),a.interactivity.status="mousemove"}),a.interactivity.el.addEventListener("mouseleave",function(e){a.interactivity.mouse.pos_x=null,a.interactivity.mouse.pos_y=null,a.interactivity.status="mouseleave"})),a.interactivity.events.onclick.enable&&a.interactivity.el.addEventListener("click",function(){if(a.interactivity.mouse.click_pos_x=a.interactivity.mouse.pos_x,a.interactivity.mouse.click_pos_y=a.interactivity.mouse.pos_y,a.interactivity.mouse.click_time=(new Date).getTime(),a.interactivity.events.onclick.enable)switch(a.interactivity.events.onclick.mode){case"push":a.particles.move.enable?a.fn.modes.pushParticles(a.interactivity.modes.push.particles_nb,a.interactivity.mouse):1==a.interactivity.modes.push.particles_nb?a.fn.modes.pushParticles(a.interactivity.modes.push.particles_nb,a.interactivity.mouse):a.interactivity.modes.push.particles_nb>1&&a.fn.modes.pushParticles(a.interactivity.modes.push.particles_nb);break;case"remove":a.fn.modes.removeParticles(a.interactivity.modes.remove.particles_nb);break;case"bubble":a.tmp.bubble_clicking=!0;break;case"repulse":a.tmp.repulse_clicking=!0,a.tmp.repulse_count=0,a.tmp.repulse_finish=!1,setTimeout(function(){a.tmp.repulse_clicking=!1},1e3*a.interactivity.modes.repulse.duration)}})},a.fn.vendors.densityAutoParticles=function(){if(a.particles.number.density.enable){var e=a.canvas.el.width*a.canvas.el.height/1e3;a.tmp.retina&&(e/=2*a.canvas.pxratio);var t=e*a.particles.number.value/a.particles.number.density.value_area,n=a.particles.array.length-t;n<0?a.fn.modes.pushParticles(Math.abs(n)):a.fn.modes.removeParticles(n)}},a.fn.vendors.checkOverlap=function(e,t){for(var n=0;n<a.particles.array.length;n++){var o=a.particles.array[n],r=e.x-o.x,i=e.y-o.y,s=Math.sqrt(r*r+i*i);s<=e.radius+o.radius&&(e.x=t?t.x:Math.random()*a.canvas.w,e.y=t?t.y:Math.random()*a.canvas.h,a.fn.vendors.checkOverlap(e))}},a.fn.vendors.createSvgImg=function(e){var t=a.tmp.source_svg,n=/#([0-9A-F]{3,6})/gi,o=t.replace(n,function(t,n,o,r){if(e.color.rgb)var i="rgba("+e.color.rgb.r+","+e.color.rgb.g+","+e.color.rgb.b+","+e.opacity+")";else var i="hsla("+e.color.hsl.h+","+e.color.hsl.s+"%,"+e.color.hsl.l+"%,"+e.opacity+")";return i}),r=new Blob([o],{type:"image/svg__+xml;charset=utf-8"}),i=window.URL||window.webkitURL||window,s=i.createObjectURL(r),c=new Image;c.addEventListener("load",function(){e.img.obj=c,e.img.loaded=!0,i.revokeObjectURL(s),a.tmp.count_svg++}),c.src=s},a.fn.vendors.destroypJS=function(){cancelAnimationFrame(a.fn.drawAnimFrame),s.remove(),pJSDom=null},a.fn.vendors.drawShape=function(e,t,n,o,r,i){var s=r*i,a=r/i,c=180*(a-2)/a,l=Math.PI-Math.PI*c/180;e.save(),e.beginPath(),e.translate(t,n),e.moveTo(0,0);for(var u=0;u<s;u++)e.lineTo(o,0),e.translate(o,0),e.rotate(l);e.fill(),e.restore()},a.fn.vendors.exportImg=function(){window.open(a.canvas.el.toDataURL("image/png"),"_blank")},a.fn.vendors.loadImg=function(e){if(a.tmp.img_error=void 0,""!=a.particles.shape.image.src)if("svg__"==e){var t=new XMLHttpRequest;t.open("GET",a.particles.shape.image.src),t.onreadystatechange=function(e){4==t.readyState&&(200==t.status?(a.tmp.source_svg=e.currentTarget.response,a.fn.vendors.checkBeforeDraw()):a.tmp.img_error=!0)},t.send()}else{var n=new Image;n.addEventListener("load",function(){a.tmp.img_obj=n,a.fn.vendors.checkBeforeDraw()}),n.src=a.particles.shape.image.src}else a.tmp.img_error=!0},a.fn.vendors.draw=function(){"image"==a.particles.shape.type?"svg__"==a.tmp.img_type?a.tmp.count_svg>=a.particles.number.value?(a.fn.particlesDraw(),a.particles.move.enable?a.fn.drawAnimFrame=requestAnimFrame(a.fn.vendors.draw):cancelRequestAnimFrame(a.fn.drawAnimFrame)):a.tmp.img_error||(a.fn.drawAnimFrame=requestAnimFrame(a.fn.vendors.draw)):void 0!=a.tmp.img_obj?(a.fn.particlesDraw(),a.particles.move.enable?a.fn.drawAnimFrame=requestAnimFrame(a.fn.vendors.draw):cancelRequestAnimFrame(a.fn.drawAnimFrame)):a.tmp.img_error||(a.fn.drawAnimFrame=requestAnimFrame(a.fn.vendors.draw)):(a.fn.particlesDraw(),a.particles.move.enable?a.fn.drawAnimFrame=requestAnimFrame(a.fn.vendors.draw):cancelRequestAnimFrame(a.fn.drawAnimFrame))},a.fn.vendors.checkBeforeDraw=function(){"image"==a.particles.shape.type?"svg__"==a.tmp.img_type&&void 0==a.tmp.source_svg?a.tmp.checkAnimFrame=requestAnimFrame(check):(cancelRequestAnimFrame(a.tmp.checkAnimFrame),a.tmp.img_error||(a.fn.vendors.init(),a.fn.vendors.draw())):(a.fn.vendors.init(),a.fn.vendors.draw())},a.fn.vendors.init=function(){a.fn.retinaInit(),a.fn.canvasInit(),a.fn.canvasSize(),a.fn.canvasPaint(),a.fn.particlesCreate(),a.fn.vendors.densityAutoParticles(),a.particles.line_linked.color_rgb_line=n(a.particles.line_linked.color)},a.fn.vendors.start=function(){r("image",a.particles.shape.type)?(a.tmp.img_type=a.particles.shape.image.src.substr(a.particles.shape.image.src.length-3),a.fn.vendors.loadImg(a.tmp.img_type)):a.fn.vendors.checkBeforeDraw()},a.fn.vendors.eventsListeners(),a.fn.vendors.start()};Object.deepExtend=function c(e,t){for(var n in t)t[n]&&t[n].constructor&&t[n].constructor===Object?(e[n]=e[n]||{},c(e[n],t[n])):e[n]=t[n];return e},window.requestAnimFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout(e,1e3/60)}}(),window.cancelRequestAnimFrame=function(){return window.cancelAnimationFrame||window.webkitCancelRequestAnimationFrame||window.mozCancelRequestAnimationFrame||window.oCancelRequestAnimationFrame||window.msCancelRequestAnimationFrame||clearTimeout}(),window.pJSDom=[],window.particlesJS=function(e,t){"string"!=typeof e&&(t=e,e="particles-js"),e||(e="particles-js");var n=document.getElementById(e),o="particles-js-canvas-el",r=n.getElementsByClassName(o);if(r.length)for(;r.length>0;)n.removeChild(r[0]);var i=document.createElement("canvas");i.className=o,i.style.width="100%",i.style.height="100%";var a=document.getElementById(e).appendChild(i);null!=a&&pJSDom.push(new s(e,t))},window.particlesJS.load=function(e,t,n){var o=new XMLHttpRequest;o.open("GET",t),o.onreadystatechange=function(t){if(4==o.readyState&&200==o.status){var r=JSON.parse(t.currentTarget.response);window.particlesJS(e,r),n&&n()}},o.send()},t.particlesJS=window.particlesJS,t.pJSDom=window.pJSDom},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}var r=n(1),i=o(r),s=location.pathname.match(/documentation/);s&&!function(){var e=document.getElementsByClassName("documentation-side-bar")[0],t=function(e){e||(e="Introduction");var t=document.querySelectorAll('a[href="#'+e+'"]'),o=void 0;try{o=n(33)("./"+e+".md")}catch(r){o=n(0)}if(t.length&&(document.getElementsByClassName("documentation-content-title")[0].innerHTML=t[0].innerText),document.getElementsByClassName("documentation-content")[0].innerHTML=o,hljs)for(var i=document.querySelectorAll("code"),s=0;s<i.length;++s)hljs.highlightBlock(i[s])},o=function s(e,t){if(!(t<=0)){var n=e-document.body.scrollTop,o=n/t*10;setTimeout(function(){document.body.scrollTop=document.body.scrollTop+o,document.body.scrollTop!==e&&s(e,t-10)},10)}},r=function(e){var t=0;if(e.offsetParent)for(;;){if(t+=e.offsetTop,!e.offsetParent)break;e=e.offsetParent}else e.y&&(t+=e.y);return t};e.addEventListener("click",function(e){if("A"===e.target.nodeName){e.preventDefault(),e.stopPropagation(),location.hash=e.target.attributes.href.value;var n=document.querySelectorAll(".documentation-side-bar a.active")[0],i=document.getElementsByClassName("documentation-content-title")[0],s=0;s=window.screen.width>768?i.offsetTop:r(i),n&&n.classList.remove("active"),e.target.setAttribute("class","active"),o(s,200),t(location.hash.substr(1))}}),e.innerHTML=i["default"].replace(RegExp('href="',"g"),'href="#'),t(location.hash.substr(1))}()},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}var r=n(27),i=o(r),s=n(24),a=location.pathname.match(/downloads/);if(a){var c=new i["default"]({url:"https://api.github.com/repos/yyyar/gobetween/releases",method:"GET",dataType:"json"});c.on("success",function(e,t){for(var n=document.getElementsByClassName("release-links")[0],o=document.getElementsByClassName("current-version")[0],r=t[0],i=1;i<t.length;i++){var a=t[i],c=document.createElement("a"),l=document.createElement("br");c.href=a.html_url,c.innerHTML="["+a.name+"]",c.target="_blank",n.appendChild(c),n.appendChild(l)}for(var u=0;u<r.assets.length;u++){var p=r.assets[u];p.name.match(/darwin_386/g)&&document.getElementsByClassName("darwin-86")[0].setAttribute("href",p.browser_download_url),p.name.match(/darwin_amd64/g)&&document.getElementsByClassName("darwin-64")[0].setAttribute("href",p.browser_download_url),p.name.match(/linux_386/g)&&document.getElementsByClassName("linux-86")[0].setAttribute("href",p.browser_download_url),p.name.match(/linux_amd64/g)&&document.getElementsByClassName("linux-64")[0].setAttribute("href",p.browser_download_url),p.name.match(/windows_386/g)&&document.getElementsByClassName("windows-86")[0].setAttribute("href",p.browser_download_url),p.name.match(/windows_amd64/g)&&document.getElementsByClassName("windows-64")[0].setAttribute("href",p.browser_download_url)}o.innerHTML="v"+r.name,document.getElementsByClassName("release-content")[0].innerHTML=s.markdown.toHTML(r.body)}),c.on("error",function(e,t){}),c.send()}},function(e,t){"use strict";var n=document.getElementById("mobile-sandwich");n.addEventListener("click",function(e){var t=e.target.parentNode.nextElementSibling;"show-mob-nav"===t.className?t.className="":t.className="show-mob-nav"})},function(e,t){},function(e,t){"use strict";function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function o(e){return"function"==typeof e}function r(e){return"number"==typeof e}function i(e){return"object"===(void 0===e?"undefined":a(e))&&null!==e}function s(e){return void 0===e}var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};e.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(e){if(!r(e)||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},n.prototype.emit=function(e){var t,n,r,a,c,l;if(this._events||(this._events={}),"error"===e&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if(t=arguments[1],t instanceof Error)throw t;var u=Error('Uncaught, unspecified "error" event. ('+t+")");throw u.context=t,u}if(n=this._events[e],s(n))return!1;if(o(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),n.apply(this,a)}else if(i(n))for(a=Array.prototype.slice.call(arguments,1),l=n.slice(),r=l.length,c=0;c<r;c++)l[c].apply(this,a);return!0},n.prototype.addListener=function(e,t){var r;if(!o(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,o(t.listener)?t.listener:t),this._events[e]?i(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,i(this._events[e])&&!this._events[e].warned&&(r=s(this._maxListeners)?n.defaultMaxListeners:this._maxListeners,r&&r>0&&this._events[e].length>r&&(this._events[e].warned=!0,"function"==typeof console.trace)),this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(e,t){function n(){this.removeListener(e,n),r||(r=!0,t.apply(this,arguments))}if(!o(t))throw TypeError("listener must be a function");var r=!1;return n.listener=t,this.on(e,n),this},n.prototype.removeListener=function(e,t){var n,r,s,a;if(!o(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(n=this._events[e],s=n.length,r=-1,n===t||o(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(i(n)){for(a=s;a-- >0;)if(n[a]===t||n[a].listener&&n[a].listener===t){r=a;break}if(r<0)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(r,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},n.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(n=this._events[e],o(n))this.removeListener(e,n);else if(n)for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},n.prototype.listeners=function(e){var t;return t=this._events&&this._events[e]?o(this._events[e])?[this._events[e]]:this._events[e].slice():[]},n.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(o(t))return 1;if(t)return t.length}return 0},n.listenerCount=function(e,t){return e.listenerCount(t)}},function(e,t,n){"use strict";t.markdown=n(25),t.parse=t.markdown.toHTML},function(e,t,n){"use strict";var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e){function t(){return"Markdown.mk_block( "+uneval(""+this)+", "+uneval(this.trailing)+", "+uneval(this.lineNumber)+" )"}function r(){var e=n(31);return"Markdown.mk_block( "+e.inspect(""+this)+", "+e.inspect(this.trailing)+", "+e.inspect(this.lineNumber)+" )"}function i(e){for(var t=0,n=-1;(n=e.indexOf("\n",n+1))!==-1;)t++;return t}function s(e,t){function n(e){this.len_after=e,this.name="close_"+t}var o=e+"_state",r="strong"==e?"em_state":"strong_state";return function(i,s){if(this[o][0]==t)return this[o].shift(),[i.length,new n(i.length-t.length)];var a=this[r].slice(),c=this[o].slice();this[o].unshift(t);var l=this.processInline(i.substr(t.length)),u=l[l.length-1];this[o].shift();if(u instanceof n){l.pop();var p=i.length-u.len_after;return[p,[e].concat(l)]}return this[r]=a,this[o]=c,[t.length,t]}}function c(e){for(var t=e.split(""),n=[""],o=!1;t.length;){var r=t.shift();switch(r){case" ":o?n[n.length-1]+=r:n.push("");break;case"'":case'"':o=!o;break;case"\\":r=t.shift();default:n[n.length-1]+=r}}return n}function l(e){return b(e)&&e.length>1&&"object"===o(e[1])&&!b(e[1])?e[1]:void 0}function u(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function d(e){if("string"==typeof e)return u(e);var t=e.shift(),n={},r=[];for(!e.length||"object"!==o(e[0])||e[0]instanceof Array||(n=e.shift());e.length;)r.push(d(e.shift()));var i="";for(var s in n)i+=" "+s+'="'+u(n[s])+'"';return"img"==t||"br"==t||"hr"==t?"<"+t+i+"/>":"<"+t+i+">"+r.join("")+"</"+t+">"}function h(e,t,n){var o;n=n||{};var r=e.slice(0);"function"==typeof n.preprocessTreeNode&&(r=n.preprocessTreeNode(r,t));var i=l(r);if(i){r[1]={};for(o in i)r[1][o]=i[o];i=r[1]}if("string"==typeof r)return r;switch(r[0]){case"header":r[0]="h"+r[1].level,delete r[1].level;break;case"bulletlist":r[0]="ul";break;case"numberlist":r[0]="ol";break;case"listitem":r[0]="li";break;case"para":r[0]="p";break;case"markdown":r[0]="html",i&&delete i.references;break;case"code_block":r[0]="pre",o=i?2:1;var s=["code"];s.push.apply(s,r.splice(o,r.length-o)),r[o]=s;break;case"inlinecode":r[0]="code";break;case"img":r[1].src=r[1].href,delete r[1].href;break;case"linebreak":r[0]="br";break;case"link":r[0]="a";break;case"link_ref":r[0]="a";var a=t[i.ref];if(!a)return i.original;delete i.ref,i.href=a.href,a.title&&(i.title=a.title),delete i.original;break;case"img_ref":r[0]="img";var a=t[i.ref];if(!a)return i.original;delete i.ref,i.src=a.href,a.title&&(i.title=a.title),delete i.original}if(o=1,i){for(var c in r[1]){o=2;break}1===o&&r.splice(o,1)}for(;o<r.length;++o)r[o]=h(r[o],t,n);return r}function m(e){for(var t=l(e)?2:1;t<e.length;)"string"==typeof e[t]?t+1<e.length&&"string"==typeof e[t+1]?e[t]+=e.splice(t+1,1)[0]:++t:(m(e[t]),++t)}var v=e.Markdown=function(e){switch(void 0===e?"undefined":o(e)){case"undefined":this.dialect=v.dialects.Gruber;break;case"object":this.dialect=e;break;default:if(!(e in v.dialects))throw Error("Unknown Markdown dialect '"+(e+"")+"'");this.dialect=v.dialects[e]}this.em_state=[],this.strong_state=[],this.debug_indent=""};e.parse=function(e,t){var n=new v(t);return n.toTree(e)},e.toHTML=function(t,n,o){var r=e.toHTMLTree(t,n,o);return e.renderJsonML(r)},e.toHTMLTree=function(e,t,n){"string"==typeof e&&(e=this.parse(e,t));var o=l(e),r={};o&&o.references&&(r=o.references);var i=h(e,r,n);return m(i),i};var f=v.mk_block=function(e,n,o){1==arguments.length&&(n="\n\n");var i=new String(e);return i.trailing=n,i.inspect=r,i.toSource=t,void 0!=o&&(i.lineNumber=o),i};v.prototype.split_blocks=function(e,t){e=e.replace(/(\r\n|\n|\r)/g,"\n");var n,o=/([\s\S]+?)($|\n#|\n(?:\s*\n|$)+)/g,r=[],s=1;for(null!=(n=/^(\s*\n)/.exec(e))&&(s+=i(n[0]),o.lastIndex=n[0].length);null!==(n=o.exec(e));)"\n#"==n[2]&&(n[2]="\n",o.lastIndex--),r.push(f(n[1],n[2],s)),s+=i(n[0]);return r},v.prototype.processBlock=function(e,t){var n=this.dialect.block,o=n.__order__;if("__call__"in n)return n.__call__.call(this,e,t);for(var r=0;r<o.length;r++){var i=n[o[r]].call(this,e,t);if(i)return(!b(i)||i.length>0&&!b(i[0]))&&this.debug(o[r],"didn't return a proper array"),i}return[]},v.prototype.processInline=function(e){return this.dialect.inline.__call__.call(this,e+"")},v.prototype.toTree=function(e,t){var n=e instanceof Array?e:this.split_blocks(e),o=this.tree;try{for(this.tree=t||this.tree||["markdown"];n.length;){var r=this.processBlock(n.shift(),n);r.length&&this.tree.push.apply(this.tree,r)}return this.tree}finally{t&&(this.tree=o)}},v.prototype.debug=function(){var e=Array.prototype.slice.call(arguments);e.unshift(this.debug_indent),"undefined"!=typeof print&&print.apply(print,e),"undefined"!=typeof console&&void 0!==console.log},v.prototype.loop_re_over_block=function(e,t,n){for(var o,r=t.valueOf();r.length&&null!=(o=e.exec(r));)r=r.substr(o[0].length),n.call(this,o);return r},v.dialects={},v.dialects.Gruber={block:{atxHeader:function(e,t){var n=e.match(/^(#{1,6})\s*(.*?)\s*#*\s*(?:\n|$)/);if(n){var o=["header",{level:n[1].length}];return Array.prototype.push.apply(o,this.processInline(n[2])),n[0].length<e.length&&t.unshift(f(e.substr(n[0].length),e.trailing,e.lineNumber+2)),[o]}},setextHeader:function(e,t){var n=e.match(/^(.*)\n([-=])\2\2+(?:\n|$)/);if(n){var o="="===n[2]?1:2,r=["header",{level:o},n[1]];return n[0].length<e.length&&t.unshift(f(e.substr(n[0].length),e.trailing,e.lineNumber+2)),[r]}},code:function(e,t){var n=[],o=/^(?: {0,3}\t| {4})(.*)\n?/;if(e.match(o)){e:for(;;){var r=this.loop_re_over_block(o,e.valueOf(),function(e){n.push(e[1])});if(r.length){t.unshift(f(r,e.trailing));break e}if(!t.length)break e;if(!t[0].match(o))break e;
n.push(e.trailing.replace(/[^\n]/g,"").substring(2)),e=t.shift()}return[["code_block",n.join("\n")]]}},horizRule:function(e,t){var n=e.match(/^(?:([\s\S]*?)\n)?[ \t]*([-_*])(?:[ \t]*\2){2,}[ \t]*(?:\n([\s\S]*))?$/);if(n){var o=[["hr"]];return n[1]&&o.unshift.apply(o,this.processBlock(n[1],[])),n[3]&&t.unshift(f(n[3])),o}},lists:function(){function e(e){return RegExp("(?:^("+c+"{0,"+e+"} {0,3})("+i+")\\s+)|(^"+c+"{0,"+(e-1)+"}[ ]{0,4})")}function t(e){return e.replace(/ {0,3}\t/g,"    ")}function n(e,t,n,o){if(t)return void e.push(["para"].concat(n));var r=e[e.length-1]instanceof Array&&"para"==e[e.length-1][0]?e[e.length-1]:e;o&&e.length>1&&n.unshift(o);for(var i=0;i<n.length;i++){var s=n[i],a="string"==typeof s;a&&r.length>1&&"string"==typeof r[r.length-1]?r[r.length-1]+=s:r.push(s)}}function o(e,t){for(var n=RegExp("^("+c+"{"+e+"}.*?\\n?)*$"),o=RegExp("^"+c+"{"+e+"}","gm"),r=[];t.length>0&&n.exec(t[0]);){var i=t.shift(),s=i.replace(o,"");r.push(f(s,i.trailing,i.lineNumber))}return r}function r(e,t,n){var o=e.list,r=o[o.length-1];if(!(r[1]instanceof Array&&"para"==r[1][0]))if(t+1==n.length)r.push(["para"].concat(r.splice(1,r.length-1)));else{var i=r.pop();r.push(["para"].concat(r.splice(1,r.length-1)),i)}}var i="[*+-]|\\d+\\.",s=/[*+-]/,a=RegExp("^( {0,3})("+i+")[ \t]+"),c="(?: {0,3}\\t| {4})";return function(i,c){function l(e){var t=s.exec(e[2])?["bulletlist"]:["numberlist"];return h.push({list:t,indent:e[1]}),t}var u=i.match(a);if(u){for(var p,d,h=[],m=l(u),v=!1,f=[h[0].list];;){for(var b=i.split(/(?=\n)/),y="",q=0;q<b.length;q++){var _="",w=b[q].replace(/^\n/,function(e){return _=e,""}),k=e(h.length);if(u=w.match(k),void 0!==u[1]){y.length&&(n(p,v,this.processInline(y),_),v=!1,y=""),u[1]=t(u[1]);var x=Math.floor(u[1].length/4)+1;if(x>h.length)m=l(u),p.push(m),p=m[1]=["listitem"];else{var S=!1;for(d=0;d<h.length;d++)if(h[d].indent==u[1]){m=h[d].list,h.splice(d+1,h.length-(d+1)),S=!0;break}S||(x++,x<=h.length?(h.splice(x,h.length-x),m=h[x-1].list):(m=l(u),p.push(m))),p=["listitem"],m.push(p)}_=""}w.length>u[0].length&&(y+=_+w.substr(u[0].length))}y.length&&(n(p,v,this.processInline(y),_),v=!1,y="");var E=o(h.length,c);E.length>0&&(g(h,r,this),p.push.apply(p,this.toTree(E,[])));var I=c[0]&&c[0].valueOf()||"";if(!I.match(a)&&!I.match(/^ /))break;i=c.shift();var T=this.dialect.block.horizRule(i,c);if(T){f.push.apply(f,T);break}g(h,r,this),v=!0}return f}}}(),blockquote:function(e,t){if(e.match(/^>/m)){var n=[];if(">"!=e[0]){for(var o=e.split(/\n/),r=[],i=e.lineNumber;o.length&&">"!=o[0][0];)r.push(o.shift()),i++;var s=f(r.join("\n"),"\n",e.lineNumber);n.push.apply(n,this.processBlock(s,[])),e=f(o.join("\n"),e.trailing,i)}for(;t.length&&">"==t[0][0];){var a=t.shift();e=f(e+e.trailing+a,a.trailing,e.lineNumber)}var c=e.replace(/^> ?/gm,""),u=(this.tree,this.toTree(c,["blockquote"])),p=l(u);return p&&p.references&&(delete p.references,y(p)&&u.splice(1,1)),n.push(u),n}},referenceDefn:function(e,t){var n=/^\s*\[(.*?)\]:\s*(\S+)(?:\s+(?:(['"])(.*?)\3|\((.*?)\)))?\n?/;if(e.match(n)){l(this.tree)||this.tree.splice(1,0,{});var o=l(this.tree);void 0===o.references&&(o.references={});var r=this.loop_re_over_block(n,e,function(e){e[2]&&"<"==e[2][0]&&">"==e[2][e[2].length-1]&&(e[2]=e[2].substring(1,e[2].length-1));var t=o.references[e[1].toLowerCase()]={href:e[2]};void 0!==e[4]?t.title=e[4]:void 0!==e[5]&&(t.title=e[5])});return r.length&&t.unshift(f(r,e.trailing)),[]}},para:function(e,t){return[["para"].concat(this.processInline(e))]}}},v.dialects.Gruber.inline={__oneElement__:function(e,t,n){var o,r;t=t||this.dialect.inline.__patterns__;var i=RegExp("([\\s\\S]*?)("+(t.source||t)+")");if(o=i.exec(e),!o)return[e.length,e];if(o[1])return[o[1].length,o[1]];var r;return o[2]in this.dialect.inline&&(r=this.dialect.inline[o[2]].call(this,e.substr(o.index),o,n||[])),r=r||[o[2].length,o[2]]},__call__:function(e,t){function n(e){"string"==typeof e&&"string"==typeof r[r.length-1]?r[r.length-1]+=e:r.push(e)}for(var o,r=[];e.length>0;)o=this.dialect.inline.__oneElement__.call(this,e,t,r),e=e.substr(o.shift()),g(o,n);return r},"]":function(){},"}":function(){},__escape__:/^\\[\\`\*_{}\[\]()#\+.!\-]/,"\\":function(e){return this.dialect.inline.__escape__.exec(e)?[2,e.charAt(1)]:[1,"\\"]},"![":function(e){var t=e.match(/^!\[(.*?)\][ \t]*\([ \t]*([^")]*?)(?:[ \t]+(["'])(.*?)\3)?[ \t]*\)/);if(t){t[2]&&"<"==t[2][0]&&">"==t[2][t[2].length-1]&&(t[2]=t[2].substring(1,t[2].length-1)),t[2]=this.dialect.inline.__call__.call(this,t[2],/\\/)[0];var n={alt:t[1],href:t[2]||""};return void 0!==t[4]&&(n.title=t[4]),[t[0].length,["img",n]]}return t=e.match(/^!\[(.*?)\][ \t]*\[(.*?)\]/),t?[t[0].length,["img_ref",{alt:t[1],ref:t[2].toLowerCase(),original:t[0]}]]:[2,"!["]},"[":function q(e){var t=e+"",n=v.DialectHelpers.inline_until_char.call(this,e.substr(1),"]");if(!n)return[1,"["];var q,o,r=1+n[0],i=n[1];e=e.substr(r);var s=e.match(/^\s*\([ \t]*([^"']*)(?:[ \t]+(["'])(.*?)\2)?[ \t]*\)/);if(s){var a=s[1];if(r+=s[0].length,a&&"<"==a[0]&&">"==a[a.length-1]&&(a=a.substring(1,a.length-1)),!s[3])for(var c=1,l=0;l<a.length;l++)switch(a[l]){case"(":c++;break;case")":0==--c&&(r-=a.length-l,a=a.substring(0,l))}return a=this.dialect.inline.__call__.call(this,a,/\\/)[0],o={href:a||""},void 0!==s[3]&&(o.title=s[3]),q=["link",o].concat(i),[r,q]}return s=e.match(/^\s*\[(.*?)\]/),s?(r+=s[0].length,o={ref:(s[1]||i+"").toLowerCase(),original:t.substr(0,r)},q=["link_ref",o].concat(i),[r,q]):1==i.length&&"string"==typeof i[0]?(o={ref:i[0].toLowerCase(),original:t.substr(0,r)},q=["link_ref",o,i[0]],[r,q]):[1,"["]},"<":function(e){var t;return null!=(t=e.match(/^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\.[a-zA-Z]+))>/))?t[3]?[t[0].length,["link",{href:"mailto:"+t[3]},t[3]]]:"mailto"==t[2]?[t[0].length,["link",{href:t[1]},t[1].substr(7)]]:[t[0].length,["link",{href:t[1]},t[1]]]:[1,"<"]},"`":function(e){var t=e.match(/(`+)(([\s\S]*?)\1)/);return t&&t[2]?[t[1].length+t[2].length,["inlinecode",t[3]]]:[1,"`"]},"  \n":function(e){return[3,["linebreak"]]}},v.dialects.Gruber.inline["**"]=s("strong","**"),v.dialects.Gruber.inline.__=s("strong","__"),v.dialects.Gruber.inline["*"]=s("em","*"),v.dialects.Gruber.inline._=s("em","_"),v.buildBlockOrder=function(e){var t=[];for(var n in e)"__order__"!=n&&"__call__"!=n&&t.push(n);e.__order__=t},v.buildInlinePatterns=function(e){var t=[];for(var n in e)if(!n.match(/^__.*__$/)){var o=n.replace(/([\\.*+?|()\[\]{}])/g,"\\$1").replace(/\n/,"\\n");t.push(1==n.length?o:"(?:"+o+")")}t=t.join("|"),e.__patterns__=t;var r=e.__call__;e.__call__=function(e,n){return void 0!=n?r.call(this,e,n):r.call(this,e,t)}},v.DialectHelpers={},v.DialectHelpers.inline_until_char=function(e,t){for(var n=0,o=[];;){if(e.charAt(n)==t)return n++,[n,o];if(n>=e.length)return null;var r=this.dialect.inline.__oneElement__.call(this,e.substr(n));n+=r[0],o.push.apply(o,r.slice(1))}},v.subclassDialect=function(e){function t(){}function n(){}return t.prototype=e.block,n.prototype=e.inline,{block:new t,inline:new n}},v.buildBlockOrder(v.dialects.Gruber.block),v.buildInlinePatterns(v.dialects.Gruber.inline),v.dialects.Maruku=v.subclassDialect(v.dialects.Gruber),v.dialects.Maruku.processMetaHash=function(e){for(var t=c(e),n={},o=0;o<t.length;++o)if(/^#/.test(t[o]))n.id=t[o].substring(1);else if(/^\./.test(t[o]))n["class"]?n["class"]=n["class"]+t[o].replace(/./," "):n["class"]=t[o].substring(1);else if(/\=/.test(t[o])){var r=t[o].split(/\=/);n[r[0]]=r[1]}return n},v.dialects.Maruku.block.document_meta=function(e,t){if(!(e.lineNumber>1)&&e.match(/^(?:\w+:.*\n)*\w+:.*$/)){l(this.tree)||this.tree.splice(1,0,{});var n=e.split(/\n/);for(p in n){var o=n[p].match(/(\w+):\s*(.*)$/),r=o[1].toLowerCase(),i=o[2];this.tree[1][r]=i}return[]}},v.dialects.Maruku.block.block_meta=function(e,t){var n=e.match(/(^|\n) {0,3}\{:\s*((?:\\\}|[^\}])*)\s*\}$/);if(n){var o,r=this.dialect.processMetaHash(n[2]);if(""===n[1]){var i=this.tree[this.tree.length-1];if(o=l(i),"string"==typeof i)return;o||(o={},i.splice(1,0,o));for(a in r)o[a]=r[a];return[]}var s=e.replace(/\n.*$/,""),c=this.processBlock(s,[]);o=l(c[0]),o||(o={},c[0].splice(1,0,o));for(a in r)o[a]=r[a];return c}},v.dialects.Maruku.block.definition_list=function(e,t){var n,o,r=/^((?:[^\s:].*\n)+):\s+([\s\S]+)$/,i=["dl"];if(o=e.match(r)){for(var s=[e];t.length&&r.exec(t[0]);)s.push(t.shift());for(var a=0;a<s.length;++a){var o=s[a].match(r),c=o[1].replace(/\n$/,"").split(/\n/),l=o[2].split(/\n:\s+/);for(n=0;n<c.length;++n)i.push(["dt",c[n]]);for(n=0;n<l.length;++n)i.push(["dd"].concat(this.processInline(l[n].replace(/(\n)\s+/,"$1"))))}return[i]}},v.dialects.Maruku.block.table=function _(e,t){var n,o,r=function(e,t){t=t||"\\s",t.match(/^[\\|\[\]{}?*.+^$]$/)&&(t="\\"+t);for(var n,o=[],r=RegExp("^((?:\\\\.|[^\\\\"+t+"])*)"+t+"(.*)");n=e.match(r);)o.push(n[1]),e=n[2];return o.push(e),o},i=/^ {0,3}\|(.+)\n {0,3}\|\s*([\-:]+[\-| :]*)\n((?:\s*\|.*(?:\n|$))*)(?=\n|$)/,s=/^ {0,3}(\S(?:\\.|[^\\|])*\|.*)\n {0,3}([\-:]+\s*\|[\-| :]*)\n((?:(?:\\.|[^\\|])*\|.*(?:\n|$))*)(?=\n|$)/;if(o=e.match(i))o[3]=o[3].replace(/^\s*\|/gm,"");else if(!(o=e.match(s)))return;var _=["table",["thead",["tr"]],["tbody"]];o[2]=o[2].replace(/\|\s*$/,"").split("|");var a=[];for(g(o[2],function(e){e.match(/^\s*-+:\s*$/)?a.push({align:"right"}):e.match(/^\s*:-+\s*$/)?a.push({align:"left"}):e.match(/^\s*:-+:\s*$/)?a.push({align:"center"}):a.push({})}),o[1]=r(o[1].replace(/\|\s*$/,""),"|"),n=0;n<o[1].length;n++)_[1][1].push(["th",a[n]||{}].concat(this.processInline(o[1][n].trim())));return g(o[3].replace(/\|\s*$/gm,"").split("\n"),function(e){var t=["tr"];for(e=r(e,"|"),n=0;n<e.length;n++)t.push(["td",a[n]||{}].concat(this.processInline(e[n].trim())));_[2].push(t)},this),[_]},v.dialects.Maruku.inline["{:"]=function(e,t,n){if(!n.length)return[2,"{:"];var o=n[n.length-1];if("string"==typeof o)return[2,"{:"];var r=e.match(/^\{:\s*((?:\\\}|[^\}])*)\s*\}/);if(!r)return[2,"{:"];var i=this.dialect.processMetaHash(r[1]),s=l(o);s||(s={},o.splice(1,0,s));for(var a in i)s[a]=i[a];return[r[0].length,""]},v.dialects.Maruku.inline.__escape__=/^\\[\\`\*_{}\[\]()#\+.!\-|:]/,v.buildBlockOrder(v.dialects.Maruku.block),v.buildInlinePatterns(v.dialects.Maruku.inline);var g,b=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)};g=Array.prototype.forEach?function(e,t,n){return e.forEach(t,n)}:function(e,t,n){for(var o=0;o<e.length;o++)t.call(n||e,e[o],o,e)};var y=function(e){for(var t in e)if(hasOwnProperty.call(e,t))return!1;return!0};e.renderJsonML=function(e,t){t=t||{},t.root=t.root||!1;var n=[];if(t.root)n.push(d(e));else for(e.shift(),!e.length||"object"!==o(e[0])||e[0]instanceof Array||e.shift();e.length;)n.push(d(e.shift()));return n.join("\n\n")}}(function(){return t}())},function(e,t){"use strict";function n(){throw Error("setTimeout has not been defined")}function o(){throw Error("clearTimeout has not been defined")}function r(e){if(u===setTimeout)return setTimeout(e,0);if((u===n||!u)&&setTimeout)return u=setTimeout,setTimeout(e,0);try{return u(e,0)}catch(t){try{return u.call(null,e,0)}catch(t){return u.call(this,e,0)}}}function i(e){if(p===clearTimeout)return clearTimeout(e);if((p===o||!p)&&clearTimeout)return p=clearTimeout,clearTimeout(e);try{return p(e)}catch(t){try{return p.call(null,e)}catch(t){return p.call(this,e)}}}function s(){v&&h&&(v=!1,h.length?m=h.concat(m):f=-1,m.length&&a())}function a(){if(!v){var e=r(s);v=!0;for(var t=m.length;t;){for(h=m,m=[];++f<t;)h&&h[f].run();f=-1,t=m.length}h=null,v=!1,i(e)}}function c(e,t){this.fun=e,this.array=t}function l(){}var u,p,d=e.exports={};!function(){try{u="function"==typeof setTimeout?setTimeout:n}catch(e){u=n}try{p="function"==typeof clearTimeout?clearTimeout:o}catch(e){p=o}}();var h,m=[],v=!1,f=-1;d.nextTick=function(e){var t=Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];m.push(new c(e,t)),1!==m.length||v||r(a)},c.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=l,d.addListener=l,d.once=l,d.off=l,d.removeListener=l,d.removeAllListeners=l,d.emit=l,d.binding=function(e){throw Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(e){throw Error("process.chdir is not supported")},d.umask=function(){return 0}},function(e,t,n){"use strict";function o(e){try{return JSON.parse(e)}catch(t){return t}}function r(){this.request.abort(),this.emit("timeout")}function i(e){var t,n=this;if("string"==typeof e&&(e={url:e}),"object"!==(void 0===e?"undefined":s(e))&&(e={}),n.settings=e,n.request=new XMLHttpRequest,n.settings.method=n.settings.method||"get",n.settings.cors&&!1 in n.request&&("undefined"!=typeof XDomainRequest?n.request=new XDomainRequest:n.emit("error",Error("Cors is not supported by this browser"))),n.settings.cache===!1&&(n.settings.data=n.settings.data||{},n.settings.data._=(new Date).getTime()),"get"===n.settings.method.toLowerCase()&&"object"===s(n.settings.data)){var r=n.settings.url.split("?");t=c.parse(r[1]);for(var i in n.settings.data)t[i]=n.settings.data[i];var a=c.stringify(t);n.settings.url=r[0]+(a?"?"+a:""),n.settings.data=null}n.request.addEventListener("progress",function(e){n.emit("progress",e)},!1),n.request.addEventListener("load",function(e){var t=e.target.responseText;if(n.settings.dataType&&"json"===n.settings.dataType.toLowerCase())if(""===t)t=void 0;else if(t=o(t),t instanceof Error)return void n.emit("error",e,t);e.target.status>=400?n.emit("error",e,t):n.emit("success",e,t)},!1),n.request.addEventListener("error",function(e){n.emit("error",e)},!1),n.request.addEventListener("abort",function(e){n.emit("error",e,Error("Connection Aborted")),n.emit("abort",e)},!1),n.request.addEventListener("loadend",function(e){clearTimeout(n._requestTimeout),n.emit("complete",e)},!1),n.request.open(n.settings.method||"get",n.settings.url,!0),n.settings.cors&&"withCredentials"in n.request&&(n.request.withCredentials=!!e.withCredentials),n.settings.contentType!==!1&&n.request.setRequestHeader("Content-Type",n.settings.contentType||"application/json; charset=utf-8"),n.settings.requestedWith!==!1&&n.request.setRequestHeader("X-Requested-With",n.settings.requestedWith||"XMLHttpRequest"),n.settings.auth&&n.request.setRequestHeader("Authorization",n.settings.auth);for(var l in n.settings.headers)n.request.setRequestHeader(l,n.settings.headers[l]);n.settings.processData!==!1&&"json"===n.settings.dataType&&(n.settings.data=JSON.stringify(n.settings.data))}var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=n(23).EventEmitter,c=n(28);i.prototype=Object.create(a.prototype),i.prototype.send=function(){var e=this;e._requestTimeout=setTimeout(function(){r.apply(e,[])},e.settings.timeout||12e4),e.request.send(e.settings.data&&e.settings.data)},e.exports=i},function(e,t,n){"use strict";var o;/*!
	query-string
	Parse and stringify URL query strings
	https://github.com/sindresorhus/query-string
	by Sindre Sorhus
	MIT License
*/
!function(){var r={};r.parse=function(e){return"string"!=typeof e?{}:(e=e.trim().replace(/^(\?|#)/,""),e?e.trim().split("&").reduce(function(e,t){var n=t.replace(/\+/g," ").split("="),o=n[0],r=n[1];return o=decodeURIComponent(o),r=void 0===r?null:decodeURIComponent(r),e.hasOwnProperty(o)?Array.isArray(e[o])?e[o].push(r):e[o]=[e[o],r]:e[o]=r,e},{}):{})},r.stringify=function(e){return e?Object.keys(e).map(function(t){var n=e[t];return Array.isArray(n)?n.map(function(e){return encodeURIComponent(t)+"="+encodeURIComponent(e)}).join("&"):encodeURIComponent(t)+"="+encodeURIComponent(n)}).join("&"):""},o=function(){return r}.call(t,n,t,e),!(void 0!==o&&(e.exports=o))}()},function(e,t){"use strict";"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t){"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};e.exports=function(e){return e&&"object"===(void 0===e?"undefined":n(e))&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},function(e,t,n){"use strict";(function(e,o){function r(e,n){var o={seen:[],stylize:s};return arguments.length>=3&&(o.depth=arguments[2]),arguments.length>=4&&(o.colors=arguments[3]),v(n)?o.showHidden=n:n&&t._extend(o,n),_(o.showHidden)&&(o.showHidden=!1),_(o.depth)&&(o.depth=2),_(o.colors)&&(o.colors=!1),_(o.customInspect)&&(o.customInspect=!0),o.colors&&(o.stylize=i),c(o,e,o.depth)}function i(e,t){var n=r.styles[t];return n?"["+r.colors[n][0]+"m"+e+"["+r.colors[n][1]+"m":e}function s(e,t){return e}function a(e){var t={};return e.forEach(function(e,n){t[e]=!0}),t}function c(e,n,o){if(e.customInspect&&n&&E(n.inspect)&&n.inspect!==t.inspect&&(!n.constructor||n.constructor.prototype!==n)){var r=n.inspect(o,e);return y(r)||(r=c(e,r,o)),r}var i=l(e,n);if(i)return i;var s=Object.keys(n),v=a(s);if(e.showHidden&&(s=Object.getOwnPropertyNames(n)),S(n)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return u(n);if(0===s.length){if(E(n)){var f=n.name?": "+n.name:"";return e.stylize("[Function"+f+"]","special")}if(w(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(x(n))return e.stylize(Date.prototype.toString.call(n),"date");if(S(n))return u(n)}var g="",b=!1,q=["{","}"];if(m(n)&&(b=!0,q=["[","]"]),E(n)){var _=n.name?": "+n.name:"";g=" [Function"+_+"]"}if(w(n)&&(g=" "+RegExp.prototype.toString.call(n)),x(n)&&(g=" "+Date.prototype.toUTCString.call(n)),S(n)&&(g=" "+u(n)),0===s.length&&(!b||0==n.length))return q[0]+g+q[1];if(o<0)return w(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special");e.seen.push(n);var k;return k=b?p(e,n,o,v,s):s.map(function(t){return d(e,n,o,v,t,b)}),e.seen.pop(),h(k,g,q)}function l(e,t){if(_(t))return e.stylize("undefined","undefined");if(y(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}return b(t)?e.stylize(""+t,"number"):v(t)?e.stylize(""+t,"boolean"):f(t)?e.stylize("null","null"):void 0}function u(e){return"["+Error.prototype.toString.call(e)+"]"}function p(e,t,n,o,r){for(var i=[],s=0,a=t.length;s<a;++s)A(t,s+"")?i.push(d(e,t,n,o,s+"",!0)):i.push("");return r.forEach(function(r){r.match(/^\d+$/)||i.push(d(e,t,n,o,r,!0))}),i}function d(e,t,n,o,r,i){var s,a,l;if(l=Object.getOwnPropertyDescriptor(t,r)||{value:t[r]},l.get?a=l.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):l.set&&(a=e.stylize("[Setter]","special")),A(o,r)||(s="["+r+"]"),a||(e.seen.indexOf(l.value)<0?(a=f(n)?c(e,l.value,null):c(e,l.value,n-1),a.indexOf("\n")>-1&&(a=i?a.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+a.split("\n").map(function(e){return"   "+e}).join("\n"))):a=e.stylize("[Circular]","special")),_(s)){if(i&&r.match(/^\d+$/))return a;s=JSON.stringify(""+r),s.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+a}function h(e,t,n){var o=0,r=e.reduce(function(e,t){return o++,t.indexOf("\n")>=0&&o++,e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0);return r>60?n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1]:n[0]+t+" "+e.join(", ")+" "+n[1]}function m(e){return Array.isArray(e)}function v(e){return"boolean"==typeof e}function f(e){return null===e}function g(e){return null==e}function b(e){return"number"==typeof e}function y(e){return"string"==typeof e}function q(e){return"symbol"===(void 0===e?"undefined":N(e))}function _(e){return void 0===e}function w(e){return k(e)&&"[object RegExp]"===T(e)}function k(e){return"object"===(void 0===e?"undefined":N(e))&&null!==e}function x(e){return k(e)&&"[object Date]"===T(e)}function S(e){return k(e)&&("[object Error]"===T(e)||e instanceof Error)}function E(e){return"function"==typeof e}function I(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"===(void 0===e?"undefined":N(e))||void 0===e}function T(e){return Object.prototype.toString.call(e)}function A(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},R=/%[sdj%]/g;t.format=function(e){if(!y(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(r(arguments[n]));return t.join(" ")}for(var n=1,o=arguments,i=o.length,s=(e+"").replace(R,function(e){if("%%"===e)return"%";if(n>=i)return e;switch(e){case"%s":return o[n++]+"";case"%d":return+o[n++];case"%j":try{return JSON.stringify(o[n++])}catch(t){return"[Circular]"}default:return e}}),a=o[n];n<i;a=o[++n])s+=f(a)||!k(a)?" "+a:" "+r(a);return s},t.deprecate=function(n,r){function i(){if(!s){if(o.throwDeprecation)throw Error(r);o.traceDeprecation,s=!0}return n.apply(this,arguments)}if(_(e.process))return function(){return t.deprecate(n,r).apply(this,arguments)};if(o.noDeprecation===!0)return n;var s=!1;return i};var C,j={};t.debuglog=function(e){if(_(C)&&(C=o.env.NODE_DEBUG||""),e=e.toUpperCase(),!j[e])if(RegExp("\\b"+e+"\\b","i").test(C)){o.pid;j[e]=function(){t.format.apply(t,arguments)}}else j[e]=function(){};return j[e]},t.inspect=r,r.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},r.styles={special:"cyan",number:"yellow","boolean":"yellow",undefined:"grey","null":"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=m,t.isBoolean=v,t.isNull=f,t.isNullOrUndefined=g,t.isNumber=b,t.isString=y,t.isSymbol=q,t.isUndefined=_,t.isRegExp=w,t.isObject=k,t.isDate=x,t.isError=S,t.isFunction=E,t.isPrimitive=I,t.isBuffer=n(30);t.log=function(){},t.inherits=n(29),t._extend=function(e,t){if(!t||!k(t))return e;for(var n=Object.keys(t),o=n.length;o--;)e[n[o]]=t[n[o]];return e}}).call(t,n(32),n(26))},function(e,t){"use strict";var n,o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(r){"object"===("undefined"==typeof window?"undefined":o(window))&&(n=window)}e.exports=n},function(e,t,n){function o(e){return n(r(e))}function r(e){var t=i[e];if(!(t+1))throw Error("Cannot find module '"+e+"'.");return t}var i={"./Access-Control.md":2,"./Balancing.md":3,"./Configuration.md":4,"./Discovery.md":5,"./Docker---Swarm-Balancing.md":6,"./ElasticSearch-cluster-with-Exec-discovery.md":7,"./Healthchecks.md":8,"./Home.md":9,"./Installation.md":10,"./Introduction.md":0,"./Performance-tests.md":11,"./REST-API.md":12,"./SRV-balancing.md":13,"./Service-balancing-with-Consul-discovery-and-Docker-Registrator.md":14,"./Static-balancing.md":15,"./TLS-Termination.md":16,"./Windows-specific-notes.md":17,"./_Sidebar.md":1};o.keys=function(){return Object.keys(i)},o.resolve=r,e.exports=o,o.id=33},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}var r=n(18),i=o(r);n(19),n(20),n(21),n(22);var s=document.getElementById("particles-js"),a=document.getElementsByClassName("header-section"),c=document.getElementsByTagName("header")[0].offsetHeight,l=document.body.scrollTop,u=l;s&&i["default"].particlesJS.load("particles-js","./particlesjs-config.json",function(){}),a.length&&window.addEventListener("scroll",function(){l=document.body.scrollTop,l?l-u>0&&l>c?document.body.className="hide-header":l-u<0&&(document.body.className="show-header"):document.body.className="",u=l})}]);